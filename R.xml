<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Lab Notebook - R</title>
 <link href="/2012/R.xml" rel="self"/>
 <link href="/"/>
 <updated>2015-01-02T05:25:23+00:00</updated>
 <id>http://www.carlboettiger.info</id>
 <author>
   <name>Carl Boettiger</name>
   <email>cboettig@gmail.com</email>
 </author>

 
 <entry>
   <title>An appropriate amount of fun with docker?</title>
	 <link href="/2012/08/08/an-appropriate-amount-of-fun-with-docker.html"/>
   <updated>2014-08-08T00:00:00+00:00</updated>
   <id>/08/08/an-appropriate-amount-of-fun-with-docker</id>
   <content type="html">&lt;p&gt;&lt;em&gt;An update on my exploration with Docker. Title courtesy of &lt;a href=&quot;https://twitter.com/DistribEcology/status/497523435371638784&quot;&gt;Ted&lt;/a&gt;, with my hopes that this really does move us in a direction where we can spend less time thinking about the tools and computational environments. Not there yet though&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I’ve gotten RStudio Server working in the &lt;a href=&quot;https://github.com/ropensci/docker-ubuntu-r/blob/master/add-r-ropensci/Dockerfile&quot;&gt;ropensci-docker&lt;/a&gt; image (Issues/pull requests welcome!).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -d -p 8787:8787 cboettig/ropensci-docker&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;will make an RStudio server instance available to you in your browser at localhost:8787. (Change the first number after the -p to have a different address). You can log in with username:pw rstudio:rstudio and have fun.&lt;/p&gt;
&lt;p&gt;One thing I like about this is the ease with which I can now get an RStudio server up and running in the cloud (e.g. I took this for sail on DigitalOcean.com today). This means in few minutes and 1 penny you have a URL that you and any collaborators could use to interact with R using the familiar RStudio interface, already provisioned with your data and dependencies in place.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;For me this is a pretty key development. It replaces a lot of command-line only interaction with probably the most familiar R environment out there, online or off. For more widespread use or teaching this probably needs to get simpler still. I’m still skeptical that this will make it out beyond the crazies, but I’m less skeptical than I was when starting this out.&lt;/p&gt;
&lt;p&gt;The ropensci-docker image could no doubt be more modular (and better documented). I’d be curious to hear if anyone has had success or problems running docker on windows / mac platforms. Issues or pull requests on the repo would be welcome! https://github.com/ropensci/docker-ubuntu-r/blob/master/add-r-ropensci/Dockerfile (maybe the repo needs to be renamed from it’s original fork now too…)&lt;/p&gt;
&lt;p&gt;Rich et al highlighted several “remaining challenges” in their original post. Here’s my take on where those stand in the Docker framework, though I’d welcome other impressions:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;dependencies could still be missed by incompletely documentation&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I think this one is largely addressed, at least assuming a user loads the Docker image. I’m still concerned that later builds of the docker image could simply break the build (though earlier images may still be available). Does anyone know how to roll back to earlier images in docker?&lt;/p&gt;
&lt;ol start=&quot;2&quot; type=&quot;1&quot;&gt;
&lt;li&gt;The set of scripts for managing reproducibility are at least as complex as the analysis itself&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I think a lot of that size is due to the lack of an R image for Travis and the need to install many common tools from scratch. Because docker is both modular and easily shared via docker hub, it’s much easier to write a really small script that builds on existing images, (as I show in cboettig/rnexml)&lt;/p&gt;
&lt;ol start=&quot;3&quot; type=&quot;1&quot;&gt;
&lt;li&gt;Travis.org CI constraints: public/open github repository with analyses that run in under 50 minutes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Docker has two advantages and also some weaknesses here: (1) it should be easy to run locally, while accomplishing much of the same thing as running on travis (though clearly that’s not as nice as running automatically &amp;amp; in the cloud on every push). (2) It’s easier to take advantage of caching – for instance, cboettig/rnexml provides the knitr cache files in the image so that a user can start exploring without waiting for all the data to download and code to run.&lt;/p&gt;
&lt;p&gt;It seems that Travis CI doesn’t currently support docker since the linux kernel they use is too old. (Presumably they’ll update one day. Anyone try Shippable CI? (which supports docker))&lt;/p&gt;
&lt;ol start=&quot;4&quot; type=&quot;1&quot;&gt;
&lt;li&gt;The learning curve is still prohibitive&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I think that’s still true. But what surprised me is that I’m not sure that it’s gotten any worse by adding docker than it was to begin with using Travis CI. Because the approach can be used both locally and for scaling up in the cloud, I think it offers some more immediate payoffs to users than learning a Github+CI approach does. (Notably it doesn’t require any git just to deploy something ‘reproducible’, though of course it works nicely with git.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Is statistical software harmful?</title>
	 <link href="/2012/06/04/is-statistical-software-harmful.html"/>
   <updated>2014-06-04T00:00:00+00:00</updated>
   <id>/06/04/is-statistical-software-harmful</id>
   <content type="html">&lt;p&gt;Ben Bolker has an excellent post on this complex issue over &lt;a href=&quot;http://dynamicecology.wordpress.com/2014/06/04/guest-post-is-statistical-software-harmful&quot;&gt;at Dynamic Ecology&lt;/a&gt;, which got me thinking about writing my own thoughts on the topic in reply.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Google recently announced that it will be making it’s own self-driving cars, rather than modifying those of others. &lt;a href=&quot;http://www.automotive.com/news/1405-google-envisions-self-driving-cars-with-no-steering-wheel/&quot;&gt;Cars that won’t have steering wheels and pedals&lt;/a&gt;. Just a button that says “stop.” What does this tell us about the future of user-friendly complex statistical software?&lt;/p&gt;
&lt;p&gt;Ben quotes prominent statisticians voicing fears that echo common concerns about self-driving cars:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Andrew Gelman attributes to Brad Efron the idea that “recommending that scientists use Bayes’ theorem is like giving the neighbourhood kids the key to your F-16″.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think it is particularly interesting and instructive that the quote Gelman attributes to Efron is about a mathematical theorem rather than about software (e.g. Bayes Theorem, not WinBUGS). Even relatively simple statistical concepts like &lt;span class=&quot;math&quot;&gt;\(p\)&lt;/span&gt; values can cause plenty of confusion, statistical package or no. The concerns are not unique to software, so the solutions cannot come through limiting access to software.&lt;/p&gt;
&lt;p&gt;I am very wary of the suggestion that we should address concerns of appropriate application by raising barriers to access. Those arguments have been made about knowledge of all forms, from access to publications, to raw data, to things as basic as education and democratic voting.&lt;/p&gt;
&lt;p&gt;There are many good reasons for not creating a statistical software implementation of a new method, but I argue here that fear of misuse just is not one of them.&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;em&gt;The barriers created by not having a convenient software implementation are not an appropriate filter to keep out people who can miss-interpret or miss-use the software. As you know, a fundamentally different skillset is required to program a published algorithm (say, MCMC), than to correctly interpret the statistical consequences.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We must be wary of a different kind of statistical machismo, in which we use the ability to implement a method by one’s self as a proxy for interpreting it correctly.&lt;/p&gt;
&lt;p&gt;1a) One immediate corollary of (1) is that: &lt;em&gt;Like it or not, someone is going to build a method that is “easy to use”, e.g. remove the programming barriers.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;1b) The second corollary is that: &lt;em&gt;individuals with excellent understanding of the proper interpretation / statistics will frequently make mistakes in the computational implementation.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Both mistakes will happen. And both are much more formidable problems in the complex methodology of today than when computer was a job description.&lt;/p&gt;
&lt;p&gt;So, what do we do? I think we should abandon the &lt;a href=&quot;http://www.r-bloggers.com/what-is-correctness-for-statistical-software/&quot;&gt;false dichotomy between “usability” and “correctness.”&lt;/a&gt;. Just because software that is easy to use is easy to misuse, does not imply that decreasing usability increases correctness. I think that is a dangerous fallacy.&lt;/p&gt;
&lt;p&gt;A software implementation should aim first to remove the programming barriers rather than statistical knowledge barriers. Best practices such as modularity and documentation should make it easy for users and developers to understand and build upon it. I agree with Ben that software error messages are poor teachers. I agree that a tool cannot be foolproof, no tool ever has been.&lt;/p&gt;
&lt;p&gt;Someone does not misuse a piece of software merely because they do not understand it. Misuse comes from mistakenly thinking you understand it. The premise that most researchers will use something they do not understand just because it is easy to use is distasteful.&lt;/p&gt;
&lt;p&gt;Kevin Slavin gives &lt;a href=&quot;http://www.ted.com/talks/kevin_slavin_how_algorithms_shape_our_world&quot;&gt;a fantastic Ted talk&lt;/a&gt; on the ubiquitous role of algorithms in today’s world. His conclusion is neither one of panacea or doom, but rather that we seek to understand and characterize them, learn their strengths and weaknesses like a naturalist studies a new species.&lt;/p&gt;
&lt;p&gt;More widespread adoption of software such as BUGS &amp;amp; relatives has indeed increased the amount of misuse and false conclusions. But it has also dramatically increased awareness of issues ranging from computational aspects peculiar to particular implementations to general understanding and discourse about Bayesian methods. Like Kevin, I don’t think we can escape the algorithms, but I do think we can learn to understand and live with them.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Deep challenges to dynamic documentation in daily workflows</title>
	 <link href="/2012/05/05/knitr-workflow-challenges.html"/>
   <updated>2014-05-05T00:00:00+00:00</updated>
   <id>/05/05/knitr-workflow-challenges</id>
   <content type="html">&lt;p&gt;We often discuss dynamic documents such as &lt;code&gt;Sweave&lt;/code&gt; and &lt;code&gt;knitr&lt;/code&gt; in reference to final products such as publications or software package vignettes. In this case, all the elements involved are already fixed: external functions, code, text, and so forth. The dynamic documentation engine is really just a tool to combine them (knit them together). Using dynamic documentation on a day-to-day basis on ongoing research presents a compelling opportunity but a rather more complex challenge as well. The code base grows, some of it gets turned into external custom functions where it continues to change. One analysis script branches into multiple that vary this or that. The text and figures are likewise subject to the same revision as the code, expanding and contracting, or being removed or shunted off into an appendix.&lt;/p&gt;
&lt;p&gt;Structuring a dynamic document when all the parts are morphing and moving is one of the major opportunities for the dynamic approach, but also the most challenging. Here I describe some of those challenges along with various tricks I have adopted to deal with them, mostly in hopes that someone with a better strategy might be inspired to fill me in.&lt;/p&gt;
&lt;h2 id=&quot;the-old-way&quot;&gt;The old way&lt;/h2&gt;
&lt;p&gt;For a while now I have been using the &lt;a href=&quot;http://yihui.name/knitr&quot;&gt;knitr&lt;/a&gt; dynamic documentation/reproducible research software for my project workflow. Most discussion of dynamic documentation focuses on ‘finished’ products such as journal articles or reports. Over the past year, I have found the dynamic documentation framework to be particularly useful as I develop ideas, and remarkably more challenging to then integrate into a final paper in a way that really takes advantage of its features. I explain both in some detail here.&lt;/p&gt;
&lt;p&gt;My former workflow followed a pattern no doubt familiar to many:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bash away in an R terminal, paste useful bits into an R script…&lt;/li&gt;
&lt;li&gt;Write manuscript separately, pasting in figures, tables, and in-line values returned from R.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This doesn’t leave much of a record of what I did or why, which is particularly frustrating when some discussion reminds me of an earlier idea.&lt;/p&gt;
&lt;h2 id=&quot;dynamic-docs-.rmd-files&quot;&gt;Dynamic docs: &lt;code&gt;.Rmd&lt;/code&gt; files&lt;/h2&gt;
&lt;p&gt;When I begin a new project, I now start off writing a &lt;code&gt;.Rmd&lt;/code&gt; file, intermixing notes to myself and code chunks. Chunks break up the code into conceptual elements, markdown gives me a more expressive way to write notes than comment lines do. Output figures, tables, and in-line values inserted. So far so good. I version manage this creature in git/Github. Great, now I have a trackable history of what is going on, and all is well:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;Document my thinking and code as I go along on a single file scratch-pad&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Version-stamped history of what I put in and what I got out on each step of the way&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rich markup with equations, figures, tables, embedded.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Caching of script chunks, allowing me to tweak and rerun an analysis without having to execute the whole script. While we can of course duplicate that behavior with careful save and load commands in a script, in knitr this comes for free.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;limitations-to-.rmd-alone&quot;&gt;Limitations to .Rmd alone&lt;/h2&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;As I go along, the &lt;code&gt;.Rmd&lt;/code&gt; files starts getting too big and cluttered to easily follow the big picture of what I’m trying to do.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Before long, my investigation branches. Having followed one &lt;code&gt;.Rmd&lt;/code&gt; script to some interesting results, I start a new &lt;code&gt;.Rmd&lt;/code&gt; script representing a new line of investigation. This new direction will nevertheless want to re-use large amounts of code from the first file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;a-solution-the-r-package-research-compendium-approach&quot;&gt;A solution? The R package “research compendium” approach&lt;/h2&gt;
&lt;p&gt;I start abstracting tasks performed in chunks into functions, so I can re-use these things elsewhere, loop over them, and document them carefully somewhere I can reference that won’t be in the way of what I’m thinking. I start to move these functions into &lt;code&gt;R/&lt;/code&gt; directory of an R package structure, documenting with &lt;code&gt;Roxygen&lt;/code&gt;. I write unit tests for these functions (in &lt;code&gt;inst/tests&lt;/code&gt;) to have quick tests to check their sanity without running my big scripts (recent habit). The package structure helps me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reuse the same code between two analyses without copy-paste or getting our of sync&lt;/li&gt;
&lt;li&gt;Document complicated algorithms outside of my working scripts&lt;/li&gt;
&lt;li&gt;Test complicated algorithms outside of my working scripts (&lt;code&gt;devtools::check&lt;/code&gt; and/or unit tests)&lt;/li&gt;
&lt;li&gt;Manage dependencies on other packages (DESCRIPTION, NAMESPACE), including other projects of mine&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This runs into trouble in several ways.&lt;/p&gt;
&lt;h2 id=&quot;problem-1-reuse-of-code-chunks&quot;&gt;Problem 1: Reuse of code chunks&lt;/h2&gt;
&lt;p&gt;What to do with code I want to reuse across blocks but do not want to write as a function, document, or test?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Perhaps this category of problem doesn’t exist, except in my laziness.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This situation arises all the time, usually through the following mechanism: almost any script performs several steps that are best represented as chunks calling different functions, such as &lt;code&gt;load_data&lt;/code&gt;, &lt;code&gt;set_fixed_parameters&lt;/code&gt;, &lt;code&gt;fit_model&lt;/code&gt;, &lt;code&gt;plot_fits&lt;/code&gt;, etc. I then want to re-run almost the same script, but with a slightly different configuration (such as a different data set or extra iterations in the fixed parameters). For just a few such cases, it doesn’t make sense to write these into a single function,&lt;a href=&quot;#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; instead, I copy this script to a new file and make the changes there.&lt;/p&gt;
&lt;p&gt;This is great until I want to change something in about the way both scripts behave that cannot be handled just by changing the &lt;code&gt;R/&lt;/code&gt; functions they share. Plotting options are a good example of this (I tend to avoid wrapping &lt;code&gt;ggplot&lt;/code&gt; calls as separate functions, as it seems to obfuscate what is otherwise a rather semantic and widely recognized, if sometimes verbose, function call).&lt;/p&gt;
&lt;p&gt;I have explored using &lt;code&gt;knitr&lt;/code&gt;’s support for external chunk inclusion, which allows me to maintain a single R script with all commonly used chunks, and then import these chunks into multiple &lt;code&gt;.Rmd&lt;/code&gt; files. An example of this can be seen in my &lt;code&gt;nonparametric-bayes&lt;/code&gt; repo, where several files (in the same directory) draw most of their code from &lt;a href=&quot;https://github.com/cboettig/nonparametric-bayes/blob/9232dfd814c40e3c48c5a837be110a870d8639da/inst/examples/BUGS/external-chunks.R&quot;&gt;external-chunks.R&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;problem-2-package-level-reproducibility&quot;&gt;Problem 2: package-level reproducibility&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Minor/relatively easy to fix.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Separate files can frustrate reproducibility of a given commit. As I change the functions in &lt;code&gt;R/&lt;/code&gt;, the &lt;code&gt;.Rmd&lt;/code&gt; file can give different results despite being unchanged. (Or fail to reflect changes because it is caching chunks and does not recognize the function definitions have changed underneath it). Git provides a solution to this: since the &lt;code&gt;.Rmd&lt;/code&gt; file lives in the same git repository (&lt;code&gt;inst/examples&lt;/code&gt;) as the package, I can make sure the whole repository matches the hash of the &lt;code&gt;.Rmd&lt;/code&gt; file: &lt;code&gt;install_github(&amp;quot;packagename&amp;quot;, &amp;quot;cboettig&amp;quot;, &amp;quot;hash&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This solution is not fail-safe: the installed version, the potentially uncommitted (but possibly installed) version of the R functions in the working directory, and the R functions present at the commit of the &lt;code&gt;.Rmd&lt;/code&gt; file (and thus matching the hash) could all be different. If we commit and install before every &lt;code&gt;knit&lt;/code&gt;, we can avoid these potential errors (at the cost of some computational overhead), restoring reproducibility to the chain.&lt;/p&gt;
&lt;h2 id=&quot;problem-3-synthesizing-results-into-a-manuscript&quot;&gt;Problem 3: Synthesizing results into a manuscript&lt;/h2&gt;
&lt;p&gt;In some ways this is the easiest part, since the code-base is relatively static and it is just a matter of selecting which results and figures to include and what code is necessary to generate it. A few organizational challenges remain:&lt;/p&gt;
&lt;p&gt;While we generally want &lt;code&gt;knitr&lt;/code&gt; code chunks for the figures and tables that will appear, we usually aren’t interested in displaying much, if any, of the actual code in the document text (unlike the examples until this point, where this was a major advantage of the knitr approach). In principle, this is as simple as setting &lt;code&gt;echo=FALSE&lt;/code&gt; in the global chunk options. In practice, it means there is little benefit to having the chunks interwoven in the document. What I tend to want is having all the chunks run at the beginning, such that any variables or results can easily be added (and their appearance tweaked by editing the code) as figure chunks or in-line expressions. The only purpose of maintaining chunks instead of a simple script is the piecewise caching of chunk dependencies which can help debugging.&lt;/p&gt;
&lt;p&gt;Since displaying the code is suppressed, we are then left with the somewhat ironic challenge of how best to present code as a supplement. One option is simply to point to the source &lt;code&gt;.Rmd&lt;/code&gt;, another is to use the &lt;code&gt;tangle()&lt;/code&gt; option to extract all the code as a separate &lt;code&gt;.R&lt;/code&gt; file. In either case, the user must also identify the correct version of the R package itself for the external &lt;code&gt;R/&lt;/code&gt; functions.&lt;/p&gt;
&lt;h2 id=&quot;problem-4-branching-into-other-projects&quot;&gt;Problem 4: Branching into other projects&lt;/h2&gt;
&lt;p&gt;Things get most complicated when projects begin to branch into other projects. In an ideal world this is simple: a new idea can be explored on a new branch of the version control system and merged back in when necessary, and an entirely new project can be built as a new R package in a different repo that depends on the existing project. After several examples of each, I have learned that it is not so simple. Despite the nice tools, I’ve learned I still need to be careful in managing my workflows in order to leave behind material that is understandable, reproducible, and reflects clear provenance. So far, I’ve learned this the hard way. I use this last section of the post to reflect on two of my own examples, as writing this helps me work through what I should have done differently.&lt;/p&gt;
&lt;h3 id=&quot;example-warning-signals-project&quot;&gt;example: warning-signals project&lt;/h3&gt;
&lt;p&gt;For instance, my work on early warning signals dates back to the start of my &lt;a href=&quot;http://openwetware.org/wiki/User:Carl_Boettiger/Notebook/Stochastic_Population_Dynamics/2010/02/09&quot;&gt;open notebook on openwetware&lt;/a&gt;, when my code lived on a Google code page which seems to have disappeared. (At the time it was part of my ‘stochastic population dynamics’ project). When I moved to Github, this project got it’s own repository, &lt;a href=&quot;https://github.com/cboettig/warningsignals&quot;&gt;warningsignals&lt;/a&gt;, though after a major re-factorization of the code I moved to a new repository, &lt;a href=&quot;https://github.com/cboettig/earlywarning&quot;&gt;earlywarning&lt;/a&gt;. Okay, so far that was due to me not really knowing what I was doing.&lt;/p&gt;
&lt;p&gt;My first paper on this topic was based on the master branch of that repository, which still contains the code required. When one of the R dependencies was moved from CRAN I was able to update the codebase to reflect the replacement package (see issue &lt;a href=&quot;https://github.com/cboettig/earlywarning/issues/10&quot;&gt;#10&lt;/a&gt;). Even before that paper appeared I started exploring other issues on different &lt;a href=&quot;https://github.com/cboettig/earlywarning/network&quot;&gt;branches&lt;/a&gt;, with the &lt;code&gt;prosecutor&lt;/code&gt; branch eventually becoming it’s own paper, and then it’s &lt;a href=&quot;https://github.com/cboettig/prosecutors-fallacy/&quot;&gt;own repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That paper sparked a comment letter in response to it, and the analysis involved in my reply piece was just developed on the same master branch of the prosecutor-fallacy repository. This leaves me with a total of three repositories across four branches, with one repo that corresponds more-or-less directly to a paper, one to two papers, and one to no papers.&lt;/p&gt;
&lt;p&gt;All four branches have diverged and unmerge-able code. Despite sharing and reusing functions across these projects, I often found it better to simply change the function on the new branch or new repo as I desired for the new work. These changes could not be easily merged back as they broke the original function calls of the earlier work.&lt;/p&gt;
&lt;p&gt;Hindsight being 20-20, it would have been preferable that I had maintained one repository, perhaps developed each paper on a different branch and clearly tagged the commit corresponding to the submission of each publication. Ideally these could be merged back where possible to a master branch. Tagged commits provide a more natural solution than unmerged branches to deal with changes to the package that would break methods from earlier publications.&lt;/p&gt;
&lt;h3 id=&quot;example-optimal-control-projects&quot;&gt;example: optimal control projects&lt;/h3&gt;
&lt;p&gt;A different line of research began through a NIMBioS working group called “Pretty Darn Good Control”, beginning it’s digital life in my &lt;a href=&quot;https://github.com/cboettig/pdg_control&quot;&gt;pdg_control&lt;/a&gt; repository. Working in different break-out groups as well as further investigation on my own soon created several different projects. Some of these have continue running towards publication, others terminating in dead ends, and still others becoming completely separate lines of work. Later work I have done in optimal control, such &lt;a href=&quot;https://github.com/cboettig/nonparametric-bayes&quot;&gt;nonparametric-bayes&lt;/a&gt; and &lt;a href=&quot;https://github.com/cboettig/multiple_uncertainty&quot;&gt;multiple_uncertainty&lt;/a&gt; depend on this package for certain basic functions, though both also contain their own diverged versions of functions that first appeared in &lt;a href=&quot;https://github.com/cboettig/pdg_control&quot;&gt;pdg_control&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Because the topics are rather different and the shared code footprint is quite small, separate repositories probably makes more sense here. Still, managing the code dependencies in separate repositories requires extra care, as checking out the right version of the focal repository does not guarantee that one will also have the right version of the [pdg_control] repository. Ideally I should note the hash of [pdg_control] on which I depend, and preferably install that package at that hash (easy enough thanks to &lt;code&gt;devtools&lt;/code&gt;), since depending on a separate project that is also still changing can be troublesome. Alternatively it might make more sense to just duplicate the original code and remove this potentially frail dependency. After all, documenting the provenance need not rely on the dependency, and it is more natural to think of these separate repos as divergent forks.&lt;/p&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;If I have a lot of different configurations, it may make sense to wrap up all these steps into a single function that takes input data and/or parameters as it’s argument and outputs a data frame with the results and inputs.&lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
 </entry>
 
 <entry>
   <title>Extending ape::phylo class to NeXML:</title>
	 <link href="/2012/10/07/nexml-phylo-class-extension.html"/>
   <updated>2013-10-07T00:00:00+00:00</updated>
   <id>/10/07/nexml-phylo-class-extension</id>
   <content type="html">&lt;p&gt;While working on the &lt;a href=&quot;https://github.com/ropensci/RNeXML&quot;&gt;RNeXML&lt;/a&gt; package, I have recently I have been puzzling over extending S3 objects to share some of the nice properties of S4 objects and methods while continuing to function with the potentially huge library of functions written to work with them. &lt;a href=&quot;http://stackoverflow.com/questions/17976217/make-s4-object-act-as-an-s3-class&quot;&gt;SO:&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To illustrate this issue, consider the S3 class &lt;code&gt;phylo&lt;/code&gt; provided by the &lt;code&gt;ape&lt;/code&gt; package and used by most of the 30+ packages that reverse depend or reverse import &lt;code&gt;ape&lt;/code&gt;. Despite this popularity, the S3 class has quite a few shortcomings (including inconsistent definition in ordering of it’s components, see the phylobase paper). To address these concerns, a hackathon consisting of many of the leading developers in this field created the &lt;code&gt;phylobase&lt;/code&gt; package with &lt;code&gt;S4&lt;/code&gt; definitions of &lt;code&gt;phylo&lt;/code&gt; objects that extend the class to handle additional types of data and address various other concerns that have arisen. Unfortunately, as far as I can tell, adoption of the new format has been lacking. In my mind, the greatest limitation of the new format is the lack of compatibility with existing methods build on the S3 type.&lt;/p&gt;
&lt;p&gt;I never understood why phylobase did not do this. To illustrate the problem, let us load an S3 &lt;code&gt;phylo&lt;/code&gt; object and then coerce it into the &lt;code&gt;phylobase&lt;/code&gt; S4 type:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(phylobase)
&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(ape)
&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt;(bird.orders)
bird.orders4 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt;(bird.orders, &lt;span class=&quot;st&quot;&gt;&amp;quot;phylo4&amp;quot;&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;# make ape::phylo tree into phylobase::phylo4 S4 class&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The S4 class has explicitly defined it’s own plotting method, so:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;plot&lt;/span&gt;(bird.orders4) &lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
&lt;img src=&quot;http://farm8.staticflickr.com/7460/10145618405_f4b1a81df8_o.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;However, the original S3 plotting method fails:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;plot.phylo&lt;/span&gt;(bird.orders4) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Error: $ operator not defined for this S4 class&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More interesting functions, many of which may not have even existed when &lt;code&gt;phylobase&lt;/code&gt; was written, operate only on the S3 class:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt; S &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;47&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;69&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;214&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;161&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;17&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;355&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;51&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;56&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;39&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;152&lt;/span&gt;,
             &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;143&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;358&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;103&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;319&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;23&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;291&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;313&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;196&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1027&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;5712&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;bd.ext&lt;/span&gt;(bird.orders4, S)   &lt;span class=&quot;co&quot;&gt;# Fails &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Error: object &amp;quot;phy&amp;quot; is not of class &amp;quot;phylo&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While we can work around this with explicit coercion, this requirement is rather crude and breaks existing code users may already rely upon:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;bd.ext&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt;(bird.orders4, &lt;span class=&quot;st&quot;&gt;&amp;quot;phylo&amp;quot;&lt;/span&gt;), S)   &lt;span class=&quot;co&quot;&gt;# Works only after coercion &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
Extended Version of the Birth-Death Models to
    Estimate Speciation and Extinction Rates

    Data: phylogenetic: as(bird.orders4, &amp;quot;phylo&amp;quot;) 
             taxonomic: S 
        Number of tips: 23 
              Deviance: 290.2 
        Log-likelihood: -145.1 
   Parameter estimates:
      d / b = 2.315e-08   StdErr = 0.1542 
      b - d = 0.2765   StdErr = 0.009578 
   (b: speciation rate, d: extinction rate)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It appears this problem can be solved using &lt;code&gt;setOldClass&lt;/code&gt;. I’ve defined an the class &lt;code&gt;phyloS4&lt;/code&gt; which inherits all methods for the S3 &lt;code&gt;phylo&lt;/code&gt; class without having to explicitly declare those methods. In this way, we have the benefits of an S4 class while maintaining compatibility with all developers who only write functions based on the S3 class. (as long as functions don’t stupidly check the string identity &lt;code&gt;class(obj) == &amp;quot;phylo&amp;quot;&lt;/code&gt;, instead of using the proper class check &lt;code&gt;is(obj, &amp;quot;phylo&amp;quot;)&lt;/code&gt; – looking at you &lt;code&gt;ape::skyline&lt;/code&gt; and friends….)&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;setClass&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;phyloS4&amp;quot;&lt;/span&gt;, 
         &lt;span class=&quot;kw&quot;&gt;representation&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;edge =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;matrix&amp;quot;&lt;/span&gt;,
                        &lt;span class=&quot;dt&quot;&gt;Nnode =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;integer&amp;quot;&lt;/span&gt;,
                        &lt;span class=&quot;dt&quot;&gt;tip.label =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;character&amp;quot;&lt;/span&gt;,
                        &lt;span class=&quot;dt&quot;&gt;edge.length =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;numeric&amp;quot;&lt;/span&gt;))
&lt;span class=&quot;kw&quot;&gt;setOldClass&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;phylo&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;S4Class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;phyloS4&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;selectMethod&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;show&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;phylo&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;removeClass&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;phyloS4&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now consider using our S4 version, rather than the phylobase S4 version:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;a &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;phylo&amp;quot;&lt;/span&gt;, bird.orders)
&lt;span class=&quot;kw&quot;&gt;is&lt;/span&gt;(a, &lt;span class=&quot;st&quot;&gt;&amp;quot;phylo&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;bd.ext&lt;/span&gt;(a, S)   &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
Extended Version of the Birth-Death Models to
    Estimate Speciation and Extinction Rates

    Data: phylogenetic: a 
             taxonomic: S 
        Number of tips: 23 
              Deviance: 290.2 
        Log-likelihood: -145.1 
   Parameter estimates:
      d / b = 2.315e-08   StdErr = 0.1542 
      b - d = 0.2765   StdErr = 0.009578 
   (b: speciation rate, d: extinction rate)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Class, &lt;code&gt;show&lt;/code&gt;, and &lt;code&gt;plot&lt;/code&gt;, and additional (&lt;code&gt;bd.ext&lt;/code&gt;) methods from the S3 class just work. Now we want to extend the class to contain additional metadata (in my case, the &lt;code&gt;nexml&lt;/code&gt; information):&lt;/p&gt;
&lt;p&gt;I can then build a new class, &lt;code&gt;nexmlTree&lt;/code&gt; by extending this class. Again my new class acts like an S3 &lt;code&gt;phylo&lt;/code&gt; in any such functions, but adds a representation containing all the nexml data. This approach doesn’t minimize memory footprint, but usually that is not a concern for R users (otherwise coercion is always an option).&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(RNeXML)
&lt;span class=&quot;kw&quot;&gt;setClass&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;nexmlTree&amp;quot;&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;representation&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;nexml =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;nexml&amp;quot;&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;contains=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;phylo&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;setMethod&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;show&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;nexmlTree&amp;quot;&lt;/span&gt;, function(object) &lt;span class=&quot;kw&quot;&gt;print.phylo&lt;/span&gt;(object))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] &amp;quot;show&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, we check a few methods:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt; b &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;nexmlTree&amp;quot;&lt;/span&gt;, bird.orders, &lt;span class=&quot;dt&quot;&gt;nexml =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt;(bird.orders, &lt;span class=&quot;st&quot;&gt;&amp;quot;nexml&amp;quot;&lt;/span&gt;))
&lt;span class=&quot;kw&quot;&gt;is&lt;/span&gt;(b, &lt;span class=&quot;st&quot;&gt;&amp;quot;phylo&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;bd.ext&lt;/span&gt;(b, S)   &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
Extended Version of the Birth-Death Models to
    Estimate Speciation and Extinction Rates

    Data: phylogenetic: b 
             taxonomic: S 
        Number of tips: 23 
              Deviance: 290.2 
        Log-likelihood: -145.1 
   Parameter estimates:
      d / b = 2.315e-08   StdErr = 0.1542 
      b - d = 0.2765   StdErr = 0.009578 
   (b: speciation rate, d: extinction rate)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This provides the additional metadata while leaving us with an object that works with all existing functions.&lt;/p&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;I’m not quite sure why this required the &lt;code&gt;show&lt;/code&gt; method to be defined such that we wouldn’t get the S4 show method instead. As a default show method seems to be the only method automatically defined for the new class, I gather it is the only one we have to overwrite in preference for the &lt;code&gt;print.phylo()&lt;/code&gt; method.&lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
 </entry>
 
 <entry>
   <title>Forking The R Journal</title>
	 <link href="/2012/07/10/forking-the-R-journal.html"/>
   <updated>2013-07-10T00:00:00+00:00</updated>
   <id>/07/10/forking-the-R-journal</id>
   <content type="html">&lt;p&gt;All I really wanted to do is cite a paper in &lt;em&gt;the R Journal&lt;/em&gt;, which is peer-reviewed, open access (CC-BY), LaTeX based and without author charges. Sure, I could do that already, but I like being able to programmatically generate citation metadata from a URL – we do have this thing called the internet now, and citations are just links, right? Unfortunately, nice as it is, the R journal doesn’t have HTML landing pages for articles that embed the metadata.&lt;/p&gt;
&lt;p&gt;This makes it harder for Google Scholar to index the articles, and means that we cannot extract citation metadata from the URL using a tool like &lt;a href=&quot;http://greycite.knowledgeblog.org&quot;&gt;greycite&lt;/a&gt;. Until now.&lt;/p&gt;
&lt;p&gt;I wrote to Editor-in-Chief Hadley Wickam about this, who responded in the best way possible: making the &lt;a href=&quot;ihttps://github.com/rjournal/rjournal.github.io&quot;&gt;journal website’s Github repository&lt;/a&gt; public. A fork and a little hacking later, and voila, we have html landing pages for &lt;em&gt;the R Journal&lt;/em&gt; with embedded metadata (pending a &lt;a href=&quot;https://github.com/rjournal/rjournal.github.io/pull/1&quot;&gt;pull request&lt;/a&gt;). Check out &lt;a href=&quot;https://github.com/cboettig/rjournal.github.io/commit/e70e84e6e53e6c04ec9864af162d7ba58439d4d5&quot;&gt;the source code&lt;/a&gt; for how this works – it’s really quite straight forward since the metadata is already available in &lt;code&gt;_config.yaml&lt;/code&gt;. The main step involves a &lt;a href=&quot;https://github.com/cboettig/rjournal.github.io/blob/e70e84e6e53e6c04ec9864af162d7ba58439d4d5/_plugins/article_html_pages.rb&quot;&gt;Generator plugin&lt;/a&gt; which builds a page for each article and makes the relevant article metadata available to the page. Then we can write a &lt;a href=&quot;https://github.com/cboettig/rjournal.github.io/blob/e70e84e6e53e6c04ec9864af162d7ba58439d4d5/_layouts/article.html&quot;&gt;page template&lt;/a&gt; using Liquid code to import the metadata.&lt;/p&gt;
&lt;p&gt;The really exciting thing about this is the basic idea of forking a journal website and improving it. There’s a lot we could do to improve the R journal. I think that ideally we’d have HTML5 versions of the articles as well, something that would be straight forward if authors used knitr of course, but I realize that’s a bigger shift. One could also automatically enhance the HTML with quite a bit more semantic content, we could have animations, links the Rnw files, etc etc. I’d be happy to help and I’m sure others would too. R-journal is great but it could be so much more as an example and test-bed of innovation in statistical publishing.&lt;/p&gt;
&lt;p&gt;Well, now that the journal is open for pull requests, hack away!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>knitcitations</title>
	 <link href="/2012/05/30/knitcitations.html"/>
   <updated>2012-05-30T00:00:00+00:00</updated>
   <id>/05/30/knitcitations</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;: Note that this package has evolved quite a bit from this initial post. While the basic interface is the same, support for additional features and some choices in formatting differ from what is presented here. Please see the &lt;a href=&quot;https://github.com/cboettig/knitcitations/&quot;&gt;README&lt;/a&gt; for the latest introduction to the package. Readers may also be interested in the more recent post discussing the &lt;a href=&quot;http://www.carlboettiger.info/2013/02/22/semantic-citations-for-the-notebook-and-knitr.html&quot;&gt;introduction of several new features including semantic tools in the &lt;code&gt;knitcitations&lt;/code&gt; package&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Markdown is becoming an increasingly popular platform for lightweight and online publishing. While traditional publishing tools like LaTeX and word processors have long had integrated bibliographic management, few tools handle citations for lightweight publishing. I am finding myself more and more drawn to markdown rather then tex/Rnw as my standard format (not least of which is the ease of displaying the files on github, particularly now that we have automatic image uploading. I’ve taken a little whack at generating in-text citations using knitr and other R tools.&lt;/p&gt;
&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;p&gt;I’ve put some simple functions in a &lt;code&gt;knitcitations&lt;/code&gt; package (see the most recent version of the &lt;a href=&quot;http://github.com/cboettig/knitcitations&quot;&gt;knitcitations package on github here&lt;/a&gt;). The functions use the crossref API to grab citation information given a doi, so I don’t have to generate a bibtex file for papers I’m reading, (inspired by the &lt;a href=&quot;http://wordpress.org/extend/plugins/kcite/&quot;&gt;kcite&lt;/a&gt; package for Wordpress). One can currently grab the package from Github&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(devtools)
&lt;span class=&quot;kw&quot;&gt;install_github&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;knitcitations&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;cboettig&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s load the package into R and go for a spin.&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;require&lt;/span&gt;(knitcitations)&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;generating-citations&quot;&gt;Generating citations&lt;/h2&gt;
&lt;h3 id=&quot;doi-approach&quot;&gt;DOI Approach&lt;/h3&gt;
&lt;p&gt;Then we can generate a citation given a DOI with the &lt;code&gt;ref&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;r &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;ref&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;10.1111/j.1461-0248.2005.00827.x&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;print&lt;/span&gt;(r, &lt;span class=&quot;st&quot;&gt;&amp;quot;html&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Halpern BS, Regan HM, Possingham HP and Mccarthy MA (2006). “Accounting For Uncertainty in Marine Reserve Design.” &lt;em&gt;Ecology Letters&lt;/em&gt;, 9. ISSN 1461-023X, &lt;a href=&quot;http://dx.doi.org/10.1111/j.1461-0248.2005.00827.x&quot;&gt;http://dx.doi.org/10.1111/j.1461-0248.2005.00827.x&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that R allows bibitems to print in a variety of formats, including html.&lt;/p&gt;
&lt;p&gt;We can generate inline citations in the short name/date format with the &lt;code&gt;citet&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;citet&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;10.1111/j.1461-0248.2005.00827.x&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[1] “Halpern &lt;em&gt;et. al.&lt;/em&gt; (2006)”&lt;/p&gt;
&lt;p&gt;Similarly we can generate parenthetical citations with the &lt;code&gt;citep&lt;/code&gt; function,&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;citep&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;10.1111/j.1461-0248.2005.00827.x&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;10.1890/11-0011.1&amp;quot;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[1] “(Halpern &lt;em&gt;et. al.&lt;/em&gt; 2006; Abrams &lt;em&gt;et. al.&lt;/em&gt; 2012)”&lt;/p&gt;
&lt;p&gt;Which can take a list of DOIs to cite parenthetically. The &lt;code&gt;citet&lt;/code&gt; and &lt;code&gt;citep&lt;/code&gt; functions are automatically retrieving the available metadata via the Crossref API, and R is storing the information to generate the final bibliography.&lt;/p&gt;
&lt;h3 id=&quot;using-and-creating-citation-keys&quot;&gt;Using and creating citation keys&lt;/h3&gt;
&lt;p&gt;When specifying a DOI for a citation, we can also give the citation a simple key name so we can use it later without having to remember the DOI, for instance, we can make the first citation of a particular example as&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;citep&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;Michaels =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;10.1111/j.1755-263X.2012.00241.x&amp;quot;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[1] “(Michaels &amp;amp; Tyre, 2012)”&lt;/p&gt;
&lt;p&gt;and then later use&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;citep&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;Michaels&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[1] “(Michaels &amp;amp; Tyre, 2012)”&lt;/p&gt;
&lt;p&gt;If we do not pass a key for the DOI we create, knitcitations will automatically generate a key of it’s own using the last name of the first author and the year. For instance, based on one of the DOI-citations we have already created, we can do&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;citet&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;Halpern2006&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[1] “Halpern &lt;em&gt;et. al.&lt;/em&gt; (2006)”&lt;/p&gt;
&lt;p&gt;and knitcitations recognizes the key. The function will try to avoid collisions in the key: if it is given or creates a key matching one that is already in use, it will see if the titles of the articles match. If the are the same, the same key is used to avoid a duplicate entry. This makes it safe to call&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;citet&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;Halpern2006 =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;10.1111/j.1461-0248.2005.00827.x&amp;quot;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[1] “Halpern &lt;em&gt;et. al.&lt;/em&gt; (2006)”&lt;/p&gt;
&lt;p&gt;even if we have earlier or later cited by the doi alone. Collision checking also avoids duplicating keys that correspond to different papers. If the titles are unique, knitcitations appends an underscore at the end of the automatically generated key. For instance, here we call a DOI that corresponds to a different citation with the same first author and year:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;citet&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;10.1111/j.1523-1739.2005.00258.x&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Warning message: Automatic key generation found a copy of this key, using Halpern2006_ instead&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[1] “Halpern &lt;em&gt;et. al.&lt;/em&gt; (2006)”&lt;/p&gt;
&lt;p&gt;A warning (not printed by knitr when this is used inline, but included in the log file) alerts us to the fact that this citation has been given an alternate key,&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;citet&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;Halpern2006_&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[1] “Halpern &lt;em&gt;et. al.&lt;/em&gt; (2006)”&lt;/p&gt;
&lt;p&gt;Of course if managing different keys sounds annoying, we can just call the DOI directly each time.&lt;/p&gt;
&lt;h3 id=&quot;bibtex-approach&quot;&gt;Bibtex Approach&lt;/h3&gt;
&lt;p&gt;If we have a bibtex file, we can use this for the citations as well. If you don’t have a bibtex file handy, you can make one containing the citation information for some of R’s packages:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;write.bibtex&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;bibtex&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;knitr&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;knitcitations&amp;quot;&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;file =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;example.bib&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could also have used the &lt;code&gt;ref&lt;/code&gt; function write a bibtex file for our list of DOIs&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;refs &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;lapply&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;10.1111/j.1461-0248.2005.00827.x&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;10.1890/11-0011.1&amp;quot;&lt;/span&gt;), 
    ref)
&lt;span class=&quot;kw&quot;&gt;write.bibtex&lt;/span&gt;(refs, &lt;span class=&quot;dt&quot;&gt;file =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;refs.bib&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once we have a bibtex file available, we must read it into R.&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;bib &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;read.bibtex&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;example.bib&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now create citations from &lt;code&gt;bib&lt;/code&gt; using the bibtex key,&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;bib[[&lt;span class=&quot;st&quot;&gt;&amp;quot;knitr&amp;quot;&lt;/span&gt;]]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Xie Y (2012). &lt;em&gt;knitr: A general-purpose package for dynamic report generation in R&lt;/em&gt;. R package version 0.5.4, &lt;URL:
http://yihui.name/knitr/&gt;.&lt;/p&gt;
&lt;p&gt;The inline citation tools can also now use this &lt;code&gt;bib&lt;/code&gt; instead of a DOI to generate a citation,&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;citet&lt;/span&gt;(bib[[&lt;span class=&quot;st&quot;&gt;&amp;quot;knitr&amp;quot;&lt;/span&gt;]])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[1] “Xie, (2012)”&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;citep&lt;/span&gt;(bib[&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;knitr&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;bibtex&amp;quot;&lt;/span&gt;)])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[1] “(Xie, 2012; Francois, 2011)”&lt;/p&gt;
&lt;p&gt;Like the case of the DOI, after we have used a citation once, we can cite by the bibkey name directly, rather than having to reference the bibentry object (&lt;em&gt;e.g.&lt;/em&gt; from the &lt;code&gt;bib&lt;/code&gt; list):&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;citet&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;knitr&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[1] “Xie, (2012)”&lt;/p&gt;
&lt;h3 id=&quot;using-the-inline-citations&quot;&gt;Using the inline citations&lt;/h3&gt;
&lt;p&gt;The inline citation calls are designed to be used with knitr’s inline code blocks. In markdown, these are enclosed in ` r `. The output format will use the plain-text rendering rather than the code markup. Thus we can use the line &lt;code&gt;citep(&amp;quot;10.1111/j.1461-0248.2005.00827.x&amp;quot;)&lt;/code&gt; to generate a parenthetical citation, (Halpern &lt;em&gt;et. al.&lt;/em&gt; 2006). We can generate the in-text citations with &lt;code&gt;citet&lt;/code&gt;, such as Xie, (2012).&lt;/p&gt;
&lt;h2 id=&quot;generating-the-final-bibliography&quot;&gt;Generating the final bibliography&lt;/h2&gt;
&lt;p&gt;As we go along adding inline citations, R stores the list of citation info. Then at the end of the document, use this command to print the bibliography generated by the use of our inline citations.&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;bibliography&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;html&amp;quot;&lt;/span&gt;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Halpern BS, Regan HM, Possingham HP and Mccarthy MA (2006). “Accounting For Uncertainty in Marine Reserve Design.” &lt;em&gt;Ecology Letters&lt;/em&gt;, &lt;strong&gt;9&lt;/strong&gt;. ISSN 1461-023X, &lt;a href=&quot;http://dx.doi.org/10.1111/j.1461-0248.2005.00827.x&quot;&gt;http://dx.doi.org/10.1111/j.1461-0248.2005.00827.x&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Abrams PA, Ruokolainen L, Shuter BJ and Mccann KS (2012). “Harvesting Creates Ecological Traps: Consequences of Invisible Mortality Risks in Predator-Prey Metacommunities.” &lt;em&gt;Ecology&lt;/em&gt;, &lt;strong&gt;93&lt;/strong&gt;. ISSN 0012-9658, &lt;a href=&quot;http://dx.doi.org/10.1890/11-0011.1&quot;&gt;http://dx.doi.org/10.1890/11-0011.1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Michaels S and Tyre AJ (2012). “How Indeterminism Shapes Ecologists’ Contributions to Managing Socio-Ecological Systems.” &lt;em&gt;Conservation Letters&lt;/em&gt;. &lt;a href=&quot;http://dx.doi.org/10.1111/j.1755-263X.2012.00241.x&quot;&gt;http://dx.doi.org/10.1111/j.1755-263X.2012.00241.x&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Halpern BS, Pyke CR, Fox HE, Haney JC, Schlaepfer MA and Zaradic P (2006). “Gaps And Mismatches Between Global Conservation Priorities And Spending.” &lt;em&gt;Conservation Biology&lt;/em&gt;, &lt;strong&gt;20&lt;/strong&gt;. &lt;a href=&quot;http://dx.doi.org/10.1111/j.1523-1739.2005.00258.x&quot;&gt;http://dx.doi.org/10.1111/j.1523-1739.2005.00258.x&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Xie Y (2012). &lt;em&gt;knitr: A general-purpose package for dynamic report generation in R&lt;/em&gt;. R package version 0.5.4, &lt;a href=&quot;http://yihui.name/knitr/&quot;&gt;http://yihui.name/knitr/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Francois R (2011). &lt;em&gt;bibtex: bibtex parser&lt;/em&gt;. R package version 0.3-0, &lt;a href=&quot;http://CRAN.R-project.org/package=bibtex&quot;&gt;http://CRAN.R-project.org/package=bibtex&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;reflections&quot;&gt;Reflections&lt;/h2&gt;
&lt;p&gt;We could have justed printed bibliography in plain text format using with &lt;code&gt;bibliography()&lt;/code&gt;. Note that it contains only the citations created with the inline citation commands &lt;code&gt;citet&lt;/code&gt; and &lt;code&gt;citep&lt;/code&gt;, in the order cited. All of these citations are stored in a hidden options variable in R when the inline functions are called. To reset the citation list (&lt;em&gt;i.e.&lt;/em&gt; empty the contents of “bibliography()”) we can use the &lt;code&gt;cleanbib()&lt;/code&gt; command, or set the option &lt;code&gt;bibliography(erase=TRUE)&lt;/code&gt;. Typically we could hide the bibliography chunk using a inline knitr call or the chunk option “echo=FALSE”.&lt;/p&gt;
&lt;p&gt;I hope to add markup to format this a bit more nicely later. For instance, we want the links to appear as real links. Additionally, we may want to add markup around the citations, such as the reason for the citation into the link using the &lt;a href=&quot;http://speroni.web.cs.unibo.it/cgi-bin/lode/req.py?req=http:/purl.org/spar/cito&quot;&gt;Citation Typing Ontology&lt;/a&gt;. Ideally I need a method to support different citation styles, even though it is silly in today’s world that the citation format is still a choice of the &lt;em&gt;publisher&lt;/em&gt; and not a choice of the &lt;em&gt;reader&lt;/em&gt;. This will probably require citeproc integration and a major upgrade. Please report any bugs, feature requests or citations on the &lt;a href=&quot;https://github.com/cboettig/knitcitations/issues&quot;&gt;Github issues tracker!&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;comparing-lightweight-citation-alternatives&quot;&gt;Comparing lightweight citation alternatives&lt;/h3&gt;
&lt;p&gt;Several citation alternatives are available for lightweight publishing outside of this option, each with its own advantages and limitations. John MacFarlane’s &lt;a href=&quot;http://johnmacfarlane.net/pandoc/&quot;&gt;Pandoc&lt;/a&gt; is probably the most widely used citation manager for markdown files, working with a bibtex source file but formatting the citation lists using citeproc. It has the advantage of a more concise citation syntax, consistent with the source-readable goals of markdown and citation formating. Of course it is a markdown extension and will not be read by other markdown interpreters. This would be less of an issue of Pandoc could run markdown -&amp;gt; markdown without garbling syntax of some other markdown interpreter, like Github-flavored markdown.&lt;/p&gt;
&lt;p&gt;The only other tool I know of that provides dynamic citations by DOI look-up is Phil Lord’s excellent Wordpress plugin, &lt;a href=&quot;http://wordpress.org/extend/plugins/kcite/&quot;&gt;kcite&lt;/a&gt;. It now uses citeproc for formatting, automatically links the in-text citations to the bibliography, supports PubMed and ArXiv ids as well as DOIs and even web URLs (though not bibtex files). The major limitation for me is that it is limited to Wordpress with Wordpress specific shortcode. (Of course I introduce R-specific code here, but with the assumption of a knitr-based audience who probably uses github). A variety of other platform-specific plugins are available to convert bibtex files into citations for different blogging platforms, including Wordpress and Jekyll.&lt;/p&gt;
&lt;p&gt;So why knitcitations? My goal is primarily to bring this functionality to knitr users who rely on the markdown format rather than the latex format and are interested in dynamic citations and web-based publishing. I hope it finds its niche.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Writing reproducibly in the open with knitr</title>
	 <link href="/2012/04/07/writing-reproducibly-in-the-open-with-knitr.html"/>
   <updated>2012-04-07T14:58:36+00:00</updated>
   <id>/04/07/writing-reproducibly-in-the-open-with-knitr</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Sweave&quot;&gt;Sweave&lt;/a&gt; is something of a gold standard in reproducible research. It creates a &lt;em&gt;dynamic document&lt;/em&gt;, written in a mix of LaTeX and R code where the results of the analysis (numbers, figures, tables) are automatically generated from the code and inserted into the resulting pdf document, making them easy to update if the data or methods change. It’s a nice idea, in principle.&lt;/p&gt;
&lt;p&gt;However, the practical troubles are many. Coauthors don’t know LaTeX, publishers who don’t accept LaTeX or pdfs. The LaTeX myth that you are freed from thinking about formatting, when in fact you have to fill your document with LaTeX specific markup that makes it a burden both to type and to read the source-code. Compiling and debugging your text. And then the reproducibility comes from sharing that Sweave file – a mix of LaTeX and R that almost no one can read easily. Where’s the elegance in that? ((I’m glossing over the additional challenges of highlighting, caching, and formating on the R code side, which have been largely addressed by additional packages and are elegantly solved in knitr.)) Sure, none of these are show-stoppers – I’ve been content with LaTeX for years – but suddenly there’s a better way.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href=&quot;http://yihui.name/knitr/&quot;&gt;knitr&lt;/a&gt;, a successor of Sweave, I can write my publications in &lt;a href=&quot;http://en.wikipedia.org/wiki/Markdown&quot;&gt;markdown&lt;/a&gt;. Unlike LaTeX, HTML, or other markup languages, markdown is designed to be easily read as plain text, but can also be interpreted into pretty HTML, and now into almost any other format thanks to &lt;a href=&quot;http://johnmacfarlane.net/pandoc/&quot;&gt;pandoc&lt;/a&gt;. All of which is to say that writing and sharing just got &lt;em&gt;a lot easier.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.carlboettiger.info/archives/4325&quot;&gt;As I have written previously&lt;/a&gt;, I already use this markdown format for my notes and code, so there’s no re-typing required. When working on the paper, I can just write. I can edit the code without flipping back and forth between files. Knitr can run the code blocks, caching parts that have already run for efficiency, and upload the resulting figures in &lt;code&gt;png&lt;/code&gt; format automatically to the Internet. Github displays the &lt;a href=&quot;https://github.com/ropensci/rfishbase/blob/master/inst/doc/rfishbase/rfishbase_github.md&quot;&gt;resulting document&lt;/a&gt; and the&lt;/p&gt;
&lt;pre class=&quot;file&quot;&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(https://github.com/ropensci/rfishbase/blob/master/inst/doc/rfishbase/source/rfishbase.md), while also &lt;a href=&quot;https://github.com/ropensci/rfishbase/commits/master/inst/doc/rfishbase/source&quot;&gt;tracking the versions&lt;/a&gt; as my writing progresses.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;http://farm8.staticflickr.com/7241/7054829647_ac9dcc4bd3_z.jpg&quot; alt=&quot;Different output formats for the manuscript&quot; /&gt;&lt;figcaption&gt;Different output formats for the manuscript&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Pandoc allows me to transform these notes into a LaTeX file that can generate professional-looking pdfs with given journal &lt;code&gt;.cls&lt;/code&gt; files by using &lt;a href=&quot;https://github.com/ropensci/rfishbase/blob/master/inst/doc/rfishbase/elsarticle.latex&quot;&gt;a custom latex template&lt;/a&gt;. Pandoc can also generate the less pretty but often required word documents. &lt;a href=&quot;https://github.com/ropensci/rfishbase/blob/master/inst/doc/rfishbase/knit&quot;&gt;A separate Rscript&lt;/a&gt; combines with a &lt;a href=&quot;https://github.com/ropensci/rfishbase/blob/master/inst/doc/rfishbase/Makefile&quot;&gt;Makefile&lt;/a&gt; to control the relevant formatting – for LaTeX output I want high-quality &lt;code&gt;pdf&lt;/code&gt; graphics, for Word-doc output I want &lt;code&gt;eps&lt;/code&gt; graphics which are created but not pasted into the Word file, for the drafts I want &lt;code&gt;png&lt;/code&gt; graphics stored online for easy sharing. Pandoc allows citations to be extracted from my Mendeley library (via Bibtex files) and inserted into each of these output formats (doc, pdf, github markdown).&lt;/p&gt;
&lt;p&gt;Getting the LaTeX template, Makefile, and knit script set up for this pipeline takes a little care – mostly to ensure figures and tables look appropriate in all outputs. Once these files are created though, they can be easily reused on other manuscripts. A simple &lt;code&gt;make pdf&lt;/code&gt; builds the pdf copy, &lt;code&gt;make docx&lt;/code&gt; builds a MS Word copy, ((though these binary files aren’t stored in the git repository)) and &lt;code&gt;make github&lt;/code&gt; the copy that displays with images on Github.&lt;/p&gt;
&lt;p&gt;The links in this post point to what is an active draft of a little manuscript at the time of this writing. In addition to making the final result reproducible, Github captures the &lt;a href=&quot;http://en.wikipedia.org/wiki/Provenance#Data_provenance&quot;&gt;provenance&lt;/a&gt; or history of the research and writing process. It’s not a perfect system, but it’s a nice step.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Citations in markdown using knitr</title>
	 <link href="/2012/03/24/citations-in-markdown-using-knitr.html"/>
   <updated>2012-03-24T21:33:27+00:00</updated>
   <id>/03/24/citations-in-markdown-using-knitr</id>
   <content type="html">&lt;p&gt;I am finding myself more and more drawn to markdown rather then tex/Rnw as my standard format (not least of which is the ease of displaying the files on github, particularly now that we have automatic image uploading). One thing I miss from latex is the citation commands. (I understand these can be provided to markdown via Pandoc, but I’d like to simply have to knit the document, and not then run it through pandoc, latex, or another interpreter). I’ve taken a little whack at generating in-text citations using knitr and other R tools.&lt;/p&gt;
&lt;h3 id=&quot;doi-approach&quot;&gt;DOI Approach&lt;/h3&gt;
&lt;p&gt;I’ve put some simple functions in a &lt;code&gt;knitcitations&lt;/code&gt; package. The functions use the crossref API to grab citation information given a doi, so I don’t have to generate a bibtex file for papers I’m reading, (inspired by the &lt;a href=&quot;http://wordpress.org/extend/plugins/kcite/&quot;&gt;kcite&lt;/a&gt; package for Wordpress). One can grab my package from github&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(devtools)
&lt;span class=&quot;kw&quot;&gt;install_github&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;knitcitations&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;cboettig&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and load the package&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;require&lt;/span&gt;(knitcitations)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we can generate a citation given a doi with the &lt;code&gt;ref&lt;/code&gt; function:&lt;/p&gt;
&lt;h3 id=&quot;bibtex-approach&quot;&gt;Bibtex Approach&lt;/h3&gt;
&lt;p&gt;If we have a bibtex file, we can use this for the citations as well. Let’s start off by getting ourselves a bibtex file from some of R’s packages:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(bibtex)
&lt;span class=&quot;kw&quot;&gt;write.bib&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;#39;bibtex&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;knitr&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;knitcitations&amp;#39;&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;file=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;example.bib&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can simply read in the bibtex files:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;
biblio &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;read.bib&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;example.bib&amp;quot;&lt;/span&gt;)
biblio[[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Francois R (2011). &lt;em&gt;bibtex: bibtex parser&lt;/em&gt;. R package version 0.3-1/r332, .&lt;/p&gt;
&lt;p&gt;(This would be much more awesome if we could generate keys on write.bib and use those bibtex keys, instead of the index value, &lt;code&gt;[[1]]&lt;/code&gt;, to generate the citation.)&lt;/p&gt;
&lt;h3 id=&quot;using-the-inline-citations&quot;&gt;Using the inline citations&lt;/h3&gt;
&lt;p&gt;Now that we can get citation information from bibtex files or dois, we need a way to insert these citations into the text. I’ve written a simple &lt;code&gt;citep&lt;/code&gt; print inline citations that would just use a given shortened format (e.g. author-year) and add the citation to a &lt;code&gt;works_cited&lt;/code&gt; object, which we could then use to generate the full citation information at the end. We can generate inline citations by giving a doi, bibentry object, or a list thereof, into inline knitr code block. Thus we can use the line &lt;code&gt;citep(&amp;quot;10.1111/j.1461-0248.2005.00827.x&amp;quot;)&lt;/code&gt; to generate a parenthetical citation, (Halpern &lt;em&gt;et. al.&lt;/em&gt; 2006). We can alos generate textual citations with &lt;code&gt;citet(biblio[1])&lt;/code&gt;, such as Francois, (2011). Parenthetical citations can take more than one entry, such as &lt;code&gt;citep[biblio[2:3]&lt;/code&gt;, which produces (Xie, 2012; Boettiger, 2012).&lt;/p&gt;
&lt;h3 id=&quot;generating-the-final-bibliography&quot;&gt;Generating the final bibliography&lt;/h3&gt;
&lt;p&gt;As we go along adding inline citations, R stores the list of citation info. Then at the end of the document, use this command to print the bibliography generated by the use of our inline citations.&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;bibliography&lt;/span&gt;()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Halpern B, Regan H, Possingham H and McCarthy M (2006). “Accounting for uncertainty in marine reserve design.” &lt;em&gt;Ecology Letters&lt;/em&gt;, &lt;em&gt;9&lt;/em&gt;. ISSN 1461-023X, .&lt;/p&gt;
&lt;p&gt;Francois R (2011). &lt;em&gt;bibtex: bibtex parser&lt;/em&gt;. R package version 0.3-1/r332, .&lt;/p&gt;
&lt;p&gt;Xie Y (2012). &lt;em&gt;knitr: A general-purpose package for dynamic report generation in R&lt;/em&gt;. R package version 0.4.1, .&lt;/p&gt;
&lt;p&gt;Boettiger C (2012). &lt;em&gt;knitcitations: Citations for knitr markdown files&lt;/em&gt;. R package version 0.0-1.&lt;/p&gt;
&lt;p&gt;I hope to add markup to format this a bit more nicely later. For instance, we want the links to appear as real links. Additionally, we may want to add markup around the citations, such as the reason for the citation into the link using the &lt;a href=&quot;http://speroni.web.cs.unibo.it/cgi-bin/lode/req.py?req=http:/purl.org/spar/cito&quot;&gt;Citation Typing Ontology&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This entry was, of course, produced in knitr with my &lt;a href=&quot;https://github.com/cboettig/knitcitations&quot;&gt;knitcitations&lt;/a&gt; package. See the &lt;a href=&quot;https://raw.github.com/cboettig/knitcitations/master/inst/examples/citations_knit_.md&quot;&gt;original source&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>knitr, github, and a new phase for the lab notebook</title>
	 <link href="/2012/03/21/knitr-github-and-a-new-phase-for-the-lab-notebook.html"/>
   <updated>2012-03-21T12:13:42+00:00</updated>
   <id>/03/21/knitr-github-and-a-new-phase-for-the-lab-notebook</id>
   <content type="html">&lt;p&gt;I have recently modified the basic workflow of my lab notebook since discovering &lt;a href=&quot;http://yihui.name/knitr/&quot;&gt;knitr&lt;/a&gt;. Before, I would write code files which I could track on &lt;a href=&quot;https://github.com&quot;&gt;github&lt;/a&gt;, push figures created by the code to flickr, and then write a notebook entry on wordpress describing what I was doing. I’d embed each figure I wanted into the entry, and each figure got an automatic link to github for the script that created it (which usually worked, though it didn’t say where in the script the command came from, and it required manually specifying the script name).&lt;/p&gt;
&lt;p&gt;Because knitr allows me to write a single file containing code and formatted text, and will automatically display the code and embed the images, I can avoid that more convoluted workflow and just write.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://farm8.staticflickr.com/7256/7003687571_09f79cfc15_o.png&quot; /&gt;](https://github.com/cboettig/pdg_control/blob/master/inst/examples)&lt;/p&gt;
&lt;p&gt;What makes this so excellent is that knitr allows me to write in markdown, and github automatically displays nicely formatted markdown instead of raw script when you visit the page. So whereas before I would keep a bunch of working &lt;a href=&quot;https://github.com/cboettig/pdg_control/tree/master/demo&quot;&gt;R scripts&lt;/a&gt; in &lt;code&gt;projectname/demo&lt;/code&gt; I now keep a bunch of &lt;a href=&quot;https://github.com/cboettig/pdg_control/tree/master/inst/examples&quot;&gt;markdown scripts&lt;/a&gt; in &lt;code&gt;inst/examples&lt;/code&gt;, ((since I’m using the R package for projects and demo/ doesn’t want non-R scripts)).&lt;/p&gt;
&lt;p&gt;The great thing about this is that I can just click on each script and see nicely rendered text, links, code, and figures right on github.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://farm7.staticflickr.com/6217/7003679683_d9f472efd6_o.png&quot; alt=&quot;example entry&quot; /&gt;](https://github.com/cboettig/pdg_control/blob/master/inst/examples/Reed.md)&lt;/p&gt;
&lt;p&gt;While I can push this same markdown script to wordpress and have it be rendered in my notebook, I think maintaining these examples on github is preferable. Note that every script-name appears twice, once with and once without the &lt;code&gt;_knit_&lt;/code&gt; extension. The &lt;code&gt;_knit_&lt;/code&gt; extension indicates the file I ran to create the output (the code is in html comments so you can only see them in raw form). Because all the code is displayed in the output file (unless I call knitr options to surpress this), there’s really no need to view the &lt;code&gt;_knit_&lt;/code&gt; file to reproduce the example, everything is in one place in the output &lt;code&gt;.md&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;These files benefit from the github managed version history, just clicking the history button gives a list of all the former versions, with code and results right there.&lt;/p&gt;
&lt;p&gt;While I could update a post in the notebook in the same way, the version control of this wordpress notebook is more crude, and more importantly, the blog-format is designed for a linear flow, whereas in a given day I might update each of these example scripts. This seems like a much more natural workflow then having consecutive entries in the notebook with updated versions of the analysis the day before, and more natural than going back and changing a previous notebook entry.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://farm8.staticflickr.com/7094/7003692801_d14a23855e_o.png&quot; /&gt;](https://github.com/cboettig/pdg_control/commits/master/inst/examples/model_uncertainty.md)&lt;/p&gt;
&lt;p&gt;Github can also gives nice snapshot of what’s changed, along with the commit notes for each project, for each day. Now that I can display figures and formatted text on github, as well as code, what role does the Wordpress notebook play? I think this wordpress notebook can resume is proper role as a lab notebook, containing reflections and synthesis on what I’ve done, rather than the more comprehensive copies of each analysis and each figure. Because it’s the internet, I can link to each of the analyses of that day using version-stable links from github, or links that always give the most recent version. This requires additional effort, but it’s a reflection I should be doing anyway. We’ll see how it goes. Meanwhile, welcome to the open lab notebook v2.0.&lt;/p&gt;
&lt;h2 id=&quot;a-few-more-details&quot;&gt;A few more details&lt;/h2&gt;
&lt;h5 id=&quot;longer-code-r-functions&quot;&gt;Longer code &amp;amp; R functions&lt;/h5&gt;
&lt;p&gt;When I write code longer than a few lines, I try to make it a function, or collection of functions, and include basic Roxygen-style documentation with it so I don’t have to read the code to remember how to use it. These functions naturally live in the &lt;code&gt;R/&lt;/code&gt; directory of the project. The project’s R package can be installed, and all these functions are then available. Each of my example scripts calls functions belonging to the package, but those functions change less regularly. To fully reproduce the example, it would be necessary to grab a copy of the R package from the same commit-version as the script. In practice, most of the time any version of the package R functions could be used.&lt;/p&gt;
&lt;h5 id=&quot;github-wiki&quot;&gt;Github wiki&lt;/h5&gt;
&lt;p&gt;Github has wiki pages which I could use instead of putting my entries in &lt;code&gt;inst/example&lt;/code&gt;, since both render markdown (the wiki will additionally render mathjax math, all be it as a png). However, the wiki is aimed at online editing, and exists as a separate repository, so just keeping the markdown files in the project directory is simpler.&lt;/p&gt;
&lt;h5 id=&quot;images&quot;&gt;Images&lt;/h5&gt;
&lt;p&gt;Github doesn’t actually host the images. In fact, my images are still being pushed to flickr, and you can see them there. Knitr is handling this automatically as the figures are created, keeping track of the links so they can be included in the output markdown. Knitr can do this with imgur out of the box, and I’ve also written a wrapper to let it push the images to a wordpress site. Doesn’t really matter where they are stored, they can always be viewed on Github.&lt;/p&gt;
&lt;h5 id=&quot;heavy-computing&quot;&gt;Heavy computing&lt;/h5&gt;
&lt;p&gt;I’ve found that the knitted markdown examples make the most sense for fast-running examples. Despite excellent caching support, I’ve found it best to run really long-running examples as external R scripts, and then save and import this data. Such scripts are often being run on a cluster that can’t push images to the internet anyway.&lt;/p&gt;
&lt;h5 id=&quot;power-of-openness&quot;&gt;Power of openness?&lt;/h5&gt;
&lt;p&gt;It occurs to me that this system would be harder but not impossible, in a closed environment. I could upload the figures to flickr with private status. The links are hashes, so cannot be guessed. If the output were then hosted on a secure site (running a markdown renderer, such as Jekyll), instead of github, these links would still work to display the images. Then one could give selected access to those pages. But the open solution works out of the box.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Citing R packages</title>
	 <link href="/2012/03/20/citing-r-packages.html"/>
   <updated>2012-03-20T10:02:09+00:00</updated>
   <id>/03/20/citing-r-packages</id>
   <content type="html">&lt;p&gt;I’m not always careful in citing all the R packages I use. R actually has some rather nice built-in mechanisms to support this, so I really have no excuse. Here’s some quick examples:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;citation&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;ouch&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;To cite the ouch package in publications
use:

  Aaron A. King and Marguerite A. Butler
  (2009), ouch: Ornstein-Uhlenbeck models
  for phylogenetic comparative hypotheses (R
  package),
  http://ouch.r-forge.r-project.org

  Butler, M. A. and King, A. A. (2004)
  Phylogenetic comparative analysis: a
  modeling approach for adaptive evolution
  Am. Nat. 164:683--695

As ouch is continually evolving, you may
want to cite its version number. Find it
with &amp;#39;help(package=ouch)&amp;#39;.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Can I have that in bibtex format please?&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;toBibtex&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;citation&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;ouch&amp;quot;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;@Manual{,
  title = {ouch: Ornstein-Uhlenbeck models for phylogenetic comparative hypotheses},
  author = {Aaron A. King and Marguerite A. Butler},
  year = {2009},
  url = {http://ouch.r-forge.r-project.org},
}
@Article{,
  author = {Marguerite A. Butler and Aaron A. King},
  title = {Phylogenetic comparative analysis: a modeling approach for adaptive evolution},
  journal = {American Naturalist},
  year = {2004},
  volume = {164},
  pages = {683--695},
  url = {http://www.journals.uchicago.edu/AN/journal/issues/v164n6/40201/40201.html},
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that this package provides the citation information for both the package and the associated journal article simultaneously, and R has successfully identified the formats as ‘Manual’ and ‘Article’ respectively.&lt;/p&gt;
&lt;p&gt;After running your code, consider creating a custom bibtex file containing the citation information for all the packages you have just used. (The file can be imported into most citation managers, if LaTeX isn’t your thing).&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;sink&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;test.bib&amp;quot;&lt;/span&gt;)
out &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;sapply&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;names&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;sessionInfo&lt;/span&gt;()$otherPkgs), 
    function(x) &lt;span class=&quot;kw&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;citation&lt;/span&gt;(x), &lt;span class=&quot;dt&quot;&gt;style =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Bibtex&amp;quot;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also simply generate the list of loaded package in LaTeX format, which could be automatically included.&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;toLatex&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;sessionInfo&lt;/span&gt;(), &lt;span class=&quot;dt&quot;&gt;locale =&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;FALSE&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;for-package-authors&quot;&gt;For package authors&lt;/h3&gt;
&lt;p&gt;R will attempt to automatically construct the citation information for the package automatically from the description file, so it is not strictly necessary to do anything to your package to create it. Note that R has recently adopted a new syntax to specify the authors, which is a bit more precise. Instead of using Authors: in the DESCRPTION, we use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Authors@R: c(person(&amp;quot;Carl&amp;quot;, &amp;quot;Boettiger&amp;quot;, role = c(&amp;quot;aut&amp;quot;, &amp;quot;cre&amp;quot;), email = &amp;quot;cboettig@gmail.com&amp;quot;), 
  person(&amp;quot;Duncan&amp;quot;, &amp;quot;Temple Lang&amp;quot;, role = &amp;quot;aut&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This defines the roles (author, creator, etc, see &lt;code&gt;?person&lt;/code&gt; for details), and ‘creator’ takes the place of the &lt;code&gt;Maintainer:&lt;/code&gt; designation, and requires an email address. If you wish to add an additional publication as part of the citation information (such as the example from &lt;code&gt;ouch&lt;/code&gt; above, you can specify this in the CITATION file. For the example this looks like:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;citHeader&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;To cite the ouch package in publications use:&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;citEntry&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;entry =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Article&amp;quot;&lt;/span&gt;, 
    &lt;span class=&quot;dt&quot;&gt;author =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;personList&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;as.person&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;Marguerite A. Butler&amp;quot;&lt;/span&gt;), 
        &lt;span class=&quot;kw&quot;&gt;as.person&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;Aaron A. King&amp;quot;&lt;/span&gt;)), &lt;span class=&quot;dt&quot;&gt;title =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Phylogenetic comparative analysis: a modeling approach for adaptive evolution&amp;quot;&lt;/span&gt;, 
    &lt;span class=&quot;dt&quot;&gt;journal =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;American Naturalist&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;year =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2004&lt;/span&gt;, 
    &lt;span class=&quot;dt&quot;&gt;volume =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;164&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;pages =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;683--695&amp;quot;&lt;/span&gt;, 
    &lt;span class=&quot;dt&quot;&gt;url =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;http://www.journals.uchicago.edu/AN/journal/issues/v164n6/40201/40201.html&amp;quot;&lt;/span&gt;, 
    &lt;span class=&quot;dt&quot;&gt;textVersion =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;paste&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;Butler, M. A. and King, A. A. (2004)&amp;quot;&lt;/span&gt;, 
        &lt;span class=&quot;st&quot;&gt;&amp;quot;Phylogenetic comparative analysis: a modeling approach for adaptive evolution&amp;quot;&lt;/span&gt;, 
        &lt;span class=&quot;st&quot;&gt;&amp;quot;Am. Nat. 164:683--695&amp;quot;&lt;/span&gt;))
&lt;span class=&quot;kw&quot;&gt;citFooter&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;As ouch is continually evolving, you may want to cite its version number. Find it with &amp;#39;help(package=ouch)&amp;#39;.&amp;quot;&lt;/span&gt;)

[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;st&quot;&gt;&amp;quot;As ouch is continually evolving, you may want to cite its version number. Find it with &amp;#39;help(package=ouch)&amp;#39;.&amp;quot;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;attr&lt;/span&gt;(,&lt;span class=&quot;st&quot;&gt;&amp;quot;class&amp;quot;&lt;/span&gt;)
[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;st&quot;&gt;&amp;quot;citationFooter&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(It seems like there should be a simple way to generate this automatically from the bibtex format, but I haven’t discovered it.)&lt;/p&gt;
&lt;h3 id=&quot;r-as-a-citation-tool&quot;&gt;R as a citation tool&lt;/h3&gt;
&lt;p&gt;I wrote an R function for the Crossref API in our rplos package. We should probably be formatting the output as an R bibentry, taking advantage of R’s understanding of citation structure. Then I could work automatic citation look-up into my posts using inline knitr calls, such as:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;crossref&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;10.1038/44766&amp;quot;&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An alternate mechanism could read in a local bibtex file and drop in the correct entry in the desired format.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Elegant & fast data manipulation with data.table</title>
	 <link href="/2012/02/12/elegant-fast-data-manipulation-with-data-table.html"/>
   <updated>2012-02-12T13:39:03+00:00</updated>
   <id>/02/12/elegant-fast-data-manipulation-with-data-table</id>
   <content type="html">&lt;p&gt;Just learned about the R &lt;a href=&quot;http://cran.r-project.org/web/packages/data.table/index.html&quot;&gt;data.table package&lt;/a&gt; (ht &lt;span class=&quot;citation&quot; data-cites=&quot;recology_&quot;&gt;@recology_&lt;/span&gt;) makes R data frames into ultra-fast, SQL-like objects.&lt;/p&gt;
&lt;p&gt;One thing we get is some very nice and powerful syntax. Consider some simple data of replicate time series:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;time &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;rep&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)
replicate &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;sort&lt;/span&gt;(time)
value &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;rnorm&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;)
df &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;data.frame&lt;/span&gt;(replicate, time, value)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To apply a function to each set of replicates, instead of&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;sapply&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;kw&quot;&gt;max&lt;/span&gt;(df$replicate), function(i) 
  &lt;span class=&quot;kw&quot;&gt;mean&lt;/span&gt;( df[df$replicate ==&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;i,]$value) 
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;require&lt;/span&gt;(data.table)
dt &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;data.table&lt;/span&gt;(df)
dt[, &lt;span class=&quot;kw&quot;&gt;mean&lt;/span&gt;(value), by=&lt;span class=&quot;st&quot;&gt;&amp;quot;replicate&amp;quot;&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that we could have passed multiple arguments to the function, &lt;code&gt;f(time, value)&lt;/code&gt;, or functions of the arguments, &lt;code&gt;mean(value*time)&lt;/code&gt;, etc. While this can be much faster data-frames to begin with (see below), when the function is much more computationally intensive than “mean”, it might be sensible to parallelize this command instead:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;require&lt;/span&gt;(snowfall)
&lt;span class=&quot;kw&quot;&gt;sfInit&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;par=&lt;/span&gt;T, &lt;span class=&quot;dt&quot;&gt;cpu=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;sfSapply&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, function(i)
  &lt;span class=&quot;kw&quot;&gt;mean&lt;/span&gt; (dt[replicate==i, value] )
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that we could have given the second argument as a list if we needed multiple columns, i.e. &lt;code&gt;list(time, value)&lt;/code&gt;. For a provocative example, consider this example comparing the two. Let’s create a very big data frame, and also make it a data table:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;grpsize =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;ceiling&lt;/span&gt;(&lt;span class=&quot;fl&quot;&gt;1e7&lt;/span&gt;/&lt;span class=&quot;dv&quot;&gt;26&lt;/span&gt;^&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;) 
DF &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;data.frame&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;rep&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;factor&lt;/span&gt;(LETTERS), &lt;span class=&quot;dt&quot;&gt;each =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;26&lt;/span&gt; *&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;grpsize), 
                 &lt;span class=&quot;dt&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;rep&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;factor&lt;/span&gt;(letters), &lt;span class=&quot;dt&quot;&gt;each =&lt;/span&gt; grpsize), 
                 &lt;span class=&quot;dt&quot;&gt;v=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;runif&lt;/span&gt;(grpsize *&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;26&lt;/span&gt; ^&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;))
DT &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;data.table&lt;/span&gt;(DF)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This table has three columns, each capital letter of the alphabet (fist column) paired with each lower-case letter in column B. Let’s imagine we want all the cases that have a capital “R” and lowercase “f”. Well, in classic R we might do:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;system.time&lt;/span&gt;( 
  DF[DF$x==&lt;span class=&quot;st&quot;&gt;&amp;quot;R&amp;quot;&lt;/span&gt; &amp;amp;&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;DF$y==&lt;span class=&quot;st&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt;, ]
)
user  system elapsed 
  &lt;span class=&quot;fl&quot;&gt;2.796&lt;/span&gt;   &lt;span class=&quot;fl&quot;&gt;0.500&lt;/span&gt;   &lt;span class=&quot;fl&quot;&gt;3.313&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could do the same command with DF, and it would do the same “Vector Search”, which is slow (order N). we can get order log(N) scaling though with join option of data.table. We first have to set x and y as “keys”.&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;setkey&lt;/span&gt;(DT, x, y)
&lt;span class=&quot;kw&quot;&gt;system.time&lt;/span&gt;(
  DT[&lt;span class=&quot;kw&quot;&gt;J&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;R&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt;)]
)
   user  system elapsed 
  &lt;span class=&quot;fl&quot;&gt;0.012&lt;/span&gt;   &lt;span class=&quot;fl&quot;&gt;0.000&lt;/span&gt;   &lt;span class=&quot;fl&quot;&gt;0.014&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A speed-up of 233 times! Certainly better than splitting up the analysis over 100s of processors. &lt;strong&gt;Brilliant&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;relationship-of-commands-to-sql&quot;&gt;Relationship of commands to SQL&lt;/h2&gt;
&lt;p&gt;The FAQ vignette provides a nice line-by-line comparison of SQL commands to data.table commands:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th style=&quot;text-align: left;&quot;&gt;data.table&lt;/th&gt;
&lt;th style=&quot;text-align: left;&quot;&gt;SQL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;i&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;where&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;j&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;select&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;:=&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;update&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;by&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;group by&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;i&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;order by (in compound syntax)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;i&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;having (in compound syntax)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;nomatch=NA&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;outer join&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;nomatch=0&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;inner join&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;mult=&amp;quot;first&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;N/A because SQL is inherently unordered&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;roll=TRUE&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;N/A because SQL is inherently unordered&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The general form is : &lt;code&gt;DT[where,select|update,group by][having][order by][ ]...[ ]&lt;/code&gt;. A key advantage of column vectors in R is that they are ordered, unlike SQL.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Is your phylogeny informative?</title>
	 <link href="/2012/01/19/is-your-phylogeny-informative.html"/>
   <updated>2012-01-19T14:10:49+00:00</updated>
   <id>/01/19/is-your-phylogeny-informative</id>
   <content type="html">&lt;p&gt;Yesterday my paper (Boettiger &lt;em&gt;et. al.&lt;/em&gt; 2012)  appeared in early view in Evolution (&lt;a href=&quot;http://www.mendeley.com/download/public/98752/4485545655/9a209c7dd29980fd2e47c06eb8b2d1d7dd6f70d4/dl.pdf&quot;&gt;author’s preprint&lt;/a&gt;),As the open access copy doesn’t appear on pubmed for a while, you can access my author’s copy &lt;a href=&quot;http://www.mendeley.com/download/public/98752/4485545655/9a209c7dd29980fd2e47c06eb8b2d1d7dd6f70d4/dl.pdf&quot;&gt;here&lt;/a&gt;. so I’d like to take this chance to share the back-story and highlight my own view on some of our findings, and the associated &lt;a href=&quot;http://cran.r-project.org/web/packages/pmc/index.html&quot;&gt;package on CRAN&lt;/a&gt;.Just submitted, meanwhile, the code is always on &lt;a href=&quot;https://github.com/cboettig/pmc&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I didn’t set out to write this paper.  I set out to write a very different paper, introducing a new phylogenetic method for continuous traits that estimates changes in evolutionary constraint.  This adds &lt;em&gt;even more &lt;/em&gt;parameters than already present in rich models multi-peak OU process, and I wanted to know if it could be justified – if there really was enough information to play the game we already had, before I went and made the situation even worse. Trying to find something rigorous enough to hang my hat on, I ended up writing this paper.&lt;/p&gt;
&lt;h3 id=&quot;the-short-of-it&quot;&gt;The short of it&lt;/h3&gt;
&lt;p&gt;There’s essentially three conclusions I draw from the paper.&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;AIC is not a reliable way to select models.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Certain parameters, such as &lt;span class=&quot;math&quot;&gt;\(\lambda\)&lt;/span&gt;, a measure of “phylogenetic signal,” (Pagel, 1999) are going to be really hard to estimate.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BUT as long as we &lt;em&gt;simulate extensively&lt;/em&gt; to test model choice and parameter uncertainty, we won’t be misled by either of these.  So it’s okay to drink the koolaid (Losos, 2011), but &lt;strong&gt;drink responsibly. &lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;a-few-reflections&quot;&gt;A few reflections&lt;/h3&gt;
&lt;p&gt;I really have two problems with AIC and other information criteria when it comes to phylogenetic methods.  One is that it’s too easy to simulate data from one model, and have the information criteria choose a ridiculously over-parameterized model instead.  In one example, the wrong model has a &lt;span class=&quot;math&quot;&gt;\(\Delta\)&lt;/span&gt;AIC of 10 points over the correct model.&lt;/p&gt;
&lt;p&gt;But a more basic problem is that it’s just not designed for hypothesis testing – it doesn’t care how much data you have, it doesn’t give a notion of significance.  If we’re ascribing biological meaning to different models as different hypotheses, we need want a measure of uncertainty.&lt;/p&gt;
&lt;p&gt;When estimating parameters that scale branch length, I think we must be cautious because these are really data-hungry, and don’t work well on small trees. Check out how few of these estimates of lambda on 100 replicate datasets hit near the correct value shown by vertical line:&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;http://farm8.staticflickr.com/7014/6727029515_bcfe58aedb_o.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;The package commands are explained in more detail in the &lt;strong&gt;&lt;a href=&quot;http://cran.r-project.org/web/packages/pmc/vignettes/pmc_tutorial.pdf&quot;&gt;package vignette&lt;/a&gt;&lt;/strong&gt;, but the idea is simple. Running the pmc comparison between two models (for the model-choice step) looks like this:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;bm_v_lambda &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;pmc&lt;/span&gt;(geospiza.tree, geospiza.data[&lt;span class=&quot;st&quot;&gt;&amp;quot;wingL&amp;quot;&lt;/span&gt;],
  &lt;span class=&quot;st&quot;&gt;&amp;quot;BM&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;lambda&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;nboot=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Extracting the distribution of estimates for the parameter lambda got from fitting the lambda model (B) to data made by simulating under lambda model (A):&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;lambdas &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;subset&lt;/span&gt;(bm_v_lambda[&lt;span class=&quot;st&quot;&gt;&amp;quot;par_dists&amp;quot;&lt;/span&gt;],
  comparison==&lt;span class=&quot;st&quot;&gt;&amp;quot;BB&amp;quot;&lt;/span&gt; &amp;amp;&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;parameter==&lt;span class=&quot;st&quot;&gt;&amp;quot;lambda&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To view the model comparison, just plot the pmc result:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;plot&lt;/span&gt;(bm_v_lambda)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The substantial overlap in the likelihood ratios after simulating under either model indicate that we cannot choose between BM and lambda in this case.  I’ll leave the paper to explain this approach in more detail, but it’s just simulation and refitting.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;http://farm8.staticflickr.com/7026/6727293465_4a2a545fdf_o.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;You could just bootstrap the likelihoods or for nested models, look at the parameter distributions, but you get the maximum &lt;em&gt;statistical power&lt;/em&gt; from the ratio (says Neyman-Pearson Lemma).&lt;/p&gt;
&lt;h3 id=&quot;a-technical-note-mix-and-match-formats&quot;&gt;A technical note: mix and match formats&lt;/h3&gt;
&lt;p&gt;Many users don’t like going between ouch format and ape/phylo formats. The pmc package doesn’t care what you use, feel free to mix and match. In case the conversion tools are useful, I’ve provided functions to move your data and trees back and forth between those formats too.  See &lt;em&gt;format&lt;/em&gt;data()_ to data-frames and &lt;em&gt;convert()&lt;/em&gt; to toggle between tree formats.&lt;/p&gt;
&lt;h2 id=&quot;reproducible-research&quot;&gt;Reproducible Research&lt;/h2&gt;
&lt;p&gt;The package is designed to make things easier.  It comes with a vignette (written in sweave) showing just what commands to run to replicate the results from the manuscript.&lt;/p&gt;
&lt;p&gt;This entire project has been documented in my open lab notebook from its &lt;a href=&quot;http://openwetware.org/wiki/User:Carl_Boettiger/Notebook/Comparative_Phylogenetics/2010/02/07&quot;&gt;inception&lt;/a&gt;. Posts prior to October 2010 can be found on my &lt;a href=&quot;http://openwetware.org/wiki/User:Carl_Boettiger/Notebook/Comparative_Phylogenetics/2010&quot;&gt;OWW notebook&lt;/a&gt;, the rest in my current &lt;a href=&quot;http://www.carlboettiger.info/archives/category/phylogenetics&quot;&gt;phylogenetics notebook&lt;/a&gt; (here on wordpress). Of course this project is interwoven with many notes on related and more recent work.&lt;/p&gt;
&lt;h2 id=&quot;additional-methods-and-feedback&quot;&gt;Additional methods and feedback&lt;/h2&gt;
&lt;p&gt;As we discuss in the paper, simulation and randomization-based methods have an established history in this field(Freckleton &amp;amp; Harvey, 2006), (Harmon &lt;em&gt;et. al.&lt;/em&gt; 2010). These are promising things to do, and we should do them more often, but I might make a few comments on these approaches.&lt;/p&gt;
&lt;p&gt;We are not getting a real power test when we simulate data produced from different models whose parameters have been arbitrarily assigned, rather than estimated on the same data, lest we overestimate the power. Of course we need to have a likelihood function to be able to estimate those parameters, which is not always available.&lt;/p&gt;
&lt;p&gt;It is also common and very useful to assign some summary statistic whose value is expected to be very different under different models of evolution, and look at it’s distribution under simulation. This is certainly valid and has ties to cutting edge approaches in ABC methods, but will be less statistically powerful than if we can calculate the likelihoods of the models directly and compare those, as we do here.&lt;/p&gt;
&lt;p&gt;Boettiger, C., Coop, G., &amp;amp; Ralph, P. (2012). IS YOUR PHYLOGENY INFORMATIVE? MEASURING THE POWER OF COMPARATIVE METHODS Evolution DOI: &lt;a href=&quot;http://dx.doi.org/10.1111/j.1558-5646.2012.01574.x&quot;&gt;10.1111/j.1558-5646.2012.01574.x&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Boettiger C, Coop G and Ralph P (2012). “is Your Phylogeny Informative? Measuring The Power of Comparative Methods.” &lt;em&gt;Evolution&lt;/em&gt;. &lt;a href=&quot;http://dx.doi.org/10.1111/j.1558-5646.2012.01574.x&quot;&gt;http://dx.doi.org/10.1111/j.1558-5646.2012.01574.x&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pagel M (1999). “Unknown.” &lt;em&gt;Nature&lt;/em&gt;, &lt;b&gt;401&lt;/b&gt;. ISSN 00280836, &lt;a href=&quot;http://dx.doi.org/10.1038/44766&quot;&gt;http://dx.doi.org/10.1038/44766&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Losos J (2011). “Seeing The Forest For The Trees: The Limitations of Phylogenies in Comparative Biology.” &lt;em&gt;The American Naturalist&lt;/em&gt;, &lt;b&gt;177&lt;/b&gt;. ISSN 00030147, &lt;a href=&quot;http://dx.doi.org/10.1086/660020&quot;&gt;http://dx.doi.org/10.1086/660020&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Freckleton R and Harvey P (2006). “Detecting Non-Brownian Trait Evolution in Adaptive Radiations.” &lt;em&gt;Plos Biology&lt;/em&gt;, &lt;b&gt;4&lt;/b&gt;. ISSN 1544-9173, &lt;a href=&quot;http://dx.doi.org/10.1371/journal.pbio.0040373&quot;&gt;http://dx.doi.org/10.1371/journal.pbio.0040373&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Harmon L, Losos J, Jonathan Davies T, Gillespie R, Gittleman J, Bryan Jennings W, Kozak K, McPeek M, Moreno-Roark F, Near T, Purvis A, Ricklefs R, Schluter D, Schulte II J, Seehausen O, Sidlauskas B, Torres-Carvajal O, Weir J and Mooers A (2010). “Early Bursts of Body Size And Shape Evolution Are Rare in Comparative Data.” &lt;em&gt;Evolution&lt;/em&gt;. &lt;a href=&quot;http://dx.doi.org/10.1111/j.1558-5646.2010.01025.x&quot;&gt;http://dx.doi.org/10.1111/j.1558-5646.2010.01025.x&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Treebase Package On Cran</title>
	 <link href="/2012/10/25/treebase-package-on-cran.html"/>
   <updated>2011-10-25T19:06:38+00:00</updated>
   <id>/10/25/treebase-package-on-cran</id>
   <content type="html">&lt;p&gt;My treebase package is now up on the &lt;a href=&quot;http://cran.r-project.org/web/packages/treebase/&quot;&gt;CRAN repository&lt;/a&gt;. (Source code is up, the binaries should appear soon). Here’s a few introductory examples to illustrate some of the functionality of the package. Thanks in part to new data deposition requirements at journals such as Evolution, Am Nat, and Sys Bio, and data management plan requirements from NSF, I hope the package will become increasingly useful for teaching by replicating results and for meta-analyses that can be automatically updated as the repository grows. Please contact me with any bugs or requests (or post in the &lt;a href=&quot;https://github.com/cboettig/treeBASE/issues?sort=created&amp;amp;direction=desc&amp;amp;state=open&quot;&gt;issue tracker&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&quot;basic-tree-and-metadata-queries&quot;&gt;Basic tree and metadata queries&lt;/h2&gt;
&lt;p&gt;Downloading trees by different queries: by author, taxa, &amp;amp; study. More options are described in the help file.&lt;/p&gt;
&lt;pre class=&quot;sourceCode R&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;
both &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;search_treebase&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;Ronquist or Hulesenbeck&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;by=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;author&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;author&amp;quot;&lt;/span&gt;))
dolphins &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;search_treebase&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;#39;&amp;quot;Delphinus&amp;quot;&amp;#39;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;by=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;taxon&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;max_trees=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)
studies &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;search_treebase&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2377&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;by=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;id.study&amp;quot;&lt;/span&gt;)
Near &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;search_treebase&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;Near&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;author&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;branch_lengths=&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;TRUE&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can query the metadata record directly. For instance, plot the growth of Treebase submissions by publication date&lt;/p&gt;
&lt;pre class=&quot;sourceCode R&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;
all &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;search_metadata&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;by=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;all&amp;quot;&lt;/span&gt;)
dates &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;sapply&lt;/span&gt;(all, function(x) &lt;span class=&quot;kw&quot;&gt;as.numeric&lt;/span&gt;(x$date))
&lt;span class=&quot;kw&quot;&gt;hist&lt;/span&gt;(dates, &lt;span class=&quot;dt&quot;&gt;main=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;TreeBase growth&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;xlab=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;Year&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(This query could also take a date range).&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;http://farm7.staticflickr.com/6221/6280258573_0c01c06c91_o.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;How do the weekly’s do on submissions to Treebase? We construct this in a way that gives us back the indices of the matches, so we can then grab those trees directly. Run the scripts yourself to see if they’ve changed!&lt;/p&gt;
&lt;pre class=&quot;sourceCode R&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;
nature &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;sapply&lt;/span&gt;(all, function(x) &lt;span class=&quot;kw&quot;&gt;length&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;grep&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;Nature&amp;quot;&lt;/span&gt;, x$publisher))&amp;gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
science &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;sapply&lt;/span&gt;(all, function(x) &lt;span class=&quot;kw&quot;&gt;length&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;grep&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;^Science$&amp;quot;&lt;/span&gt;, x$publisher))&amp;gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
&amp;gt;&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;sum&lt;/span&gt;(nature)
[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;dv&quot;&gt;14&lt;/span&gt;
&amp;gt;&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;sum&lt;/span&gt;(science)
[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;dv&quot;&gt;14&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now get me all of those treebase trees that have appeared in Nature.&lt;/p&gt;
&lt;pre class=&quot;sourceCode R&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;
s &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;get_study&lt;/span&gt;( all[nature] )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which authors have the most submissions?&lt;/p&gt;
&lt;pre class=&quot;sourceCode R&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;
authors &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;sapply&lt;/span&gt;(all, function(x){
  index &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;grep&lt;/span&gt;( &lt;span class=&quot;st&quot;&gt;&amp;quot;creator&amp;quot;&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;names&lt;/span&gt;(x))
  x[index]
  })
a &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;as.factor&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;unlist&lt;/span&gt;(authors))
&amp;gt;&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;head&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;summary&lt;/span&gt;(a))
        Crous, Pedro W.   Wingfield, Michael J. Groenewald, Johannes Z.
                     &lt;span class=&quot;dv&quot;&gt;88&lt;/span&gt;                      &lt;span class=&quot;dv&quot;&gt;68&lt;/span&gt;                      &lt;span class=&quot;dv&quot;&gt;58&lt;/span&gt;
   Donoghue, Michael J.       Takamatsu, Susumu    Wingfield, Brenda D.
                     &lt;span class=&quot;dv&quot;&gt;39&lt;/span&gt;                      &lt;span class=&quot;dv&quot;&gt;36&lt;/span&gt;                      &lt;span class=&quot;dv&quot;&gt;35&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;replicating-results&quot;&gt;Replicating results&lt;/h2&gt;
&lt;p&gt;A nice paper by Derryberry et al. appeared in Evolution recently on diversification in ovenbirds and woodcreepers (Derryberry &lt;em&gt;et. al.&lt;/em&gt; 2011). The article mentions that the tree is on Treebase, so let’s see if we can replicate their diversification rate analysis:&lt;/p&gt;
&lt;p&gt;Let’s grab the trees by that author and make sure we have the right one:&lt;/p&gt;
&lt;pre class=&quot;sourceCode R&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;require&lt;/span&gt;(treebase)
&lt;span class=&quot;kw&quot;&gt;search_treebase&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;Derryberry&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;author&amp;quot;&lt;/span&gt;)[[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]] -&amp;gt;&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;tree
&lt;span class=&quot;kw&quot;&gt;metadata&lt;/span&gt;(tree$S.id)
&lt;span class=&quot;kw&quot;&gt;plot&lt;/span&gt;(tree)&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
&lt;img src=&quot;http://farm7.staticflickr.com/6117/6280770968_483816528a_o.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;(click to zoom - go to all sizes-&amp;gt;original size)&lt;/p&gt;
&lt;p&gt;They fit a variety of diversification rate models avialable in the laser package, which they compare by aic.&lt;/p&gt;
&lt;pre class=&quot;sourceCode R&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;require&lt;/span&gt;(laser)
tt &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;branching.times&lt;/span&gt;(tree)
models &amp;lt;-&lt;span class=&quot;st&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;pb =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;pureBirth&lt;/span&gt;(tt),
                &lt;span class=&quot;dt&quot;&gt;bdfit =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;bd&lt;/span&gt;(tt),
                &lt;span class=&quot;dt&quot;&gt;y2r =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;yule2rate&lt;/span&gt;(tt), &lt;span class=&quot;co&quot;&gt;# yule model with single shift pt&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;ddl =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;DDL&lt;/span&gt;(tt), &lt;span class=&quot;co&quot;&gt;# linear, diversity-dependent&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;ddx =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;DDX&lt;/span&gt;(tt), &lt;span class=&quot;co&quot;&gt;#exponential diversity-dendent&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;sv =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;fitSPVAR&lt;/span&gt;(tt), &lt;span class=&quot;co&quot;&gt;# vary speciation in time&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;ev =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;fitEXVAR&lt;/span&gt;(tt), &lt;span class=&quot;co&quot;&gt;# vary extinction in time&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;bv =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;fitBOTHVAR&lt;/span&gt;(tt)&lt;span class=&quot;co&quot;&gt;# vary both&lt;/span&gt;
                )
aics &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;sapply&lt;/span&gt;(models, function(x) x$aic)
&lt;span class=&quot;co&quot;&gt;# show the winning model&lt;/span&gt;
models[&lt;span class=&quot;kw&quot;&gt;which.min&lt;/span&gt;(aics)]
&amp;gt;&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;models[&lt;span class=&quot;kw&quot;&gt;which.min&lt;/span&gt;(aics)]
$y2r
          LH      st1        r1         r2       aic
&lt;span class=&quot;dv&quot;&gt;276&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;505.0685&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;1.171871&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.1426537&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.05372305&lt;/span&gt; -&lt;span class=&quot;fl&quot;&gt;1004.137&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yup, their result agrees with our analysis. Using the extensive toolset for diversification rates in R, we could now rather easily check if these results hold up in newer methods such as TreePar, etc.&lt;/p&gt;
&lt;h2 id=&quot;meta-analysis&quot;&gt;Meta-Analysis&lt;/h2&gt;
&lt;p&gt;Of course one of the more interesting challenges of having an automated interface is the ability to perform meta-analyses across the set of available phylogenies in treebase. As a simple proof-of-principle, let’s check all the phylogenies in treebase to see if they fit a birth-death model or yule model better.&lt;/p&gt;
&lt;p&gt;We’ll create two simple functions to help with this analysis. While these can be provided by the treebase package, I’ve included them here to illustrate that the real flexibility comes from being able to create custom functions. ((These are primarily illustrative; I hope users and developers will create their own. In a proper analysis we would want a few additional checks.))&lt;/p&gt;
&lt;pre class=&quot;sourceCode R&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;
timetree &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;function(tree){
    check.na &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;sum&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;is.na&lt;/span&gt;(tree$edge.length))&amp;gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
    if(&lt;span class=&quot;kw&quot;&gt;is&lt;/span&gt;(check.na, &lt;span class=&quot;st&quot;&gt;&amp;quot;try-error&amp;quot;&lt;/span&gt;) |&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;check.na)
      &lt;span class=&quot;ot&quot;&gt;NULL&lt;/span&gt;
    else
    &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt;( &lt;span class=&quot;kw&quot;&gt;chronoMPL&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;multi2di&lt;/span&gt;(tree)) )
}
drop_errors &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;function(tr){
  tt &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;tr[!&lt;span class=&quot;kw&quot;&gt;sapply&lt;/span&gt;(tr, is.null)]
  tt &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;tt[!&lt;span class=&quot;kw&quot;&gt;sapply&lt;/span&gt;(tt, function(x) &lt;span class=&quot;kw&quot;&gt;is&lt;/span&gt;(x, &lt;span class=&quot;st&quot;&gt;&amp;quot;try-error&amp;quot;&lt;/span&gt;))]
  &lt;span class=&quot;kw&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;paste&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;dropped&amp;quot;&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;length&lt;/span&gt;(tr)-&lt;span class=&quot;kw&quot;&gt;length&lt;/span&gt;(tt), &lt;span class=&quot;st&quot;&gt;&amp;quot;trees&amp;quot;&lt;/span&gt;))
  tt
}
&lt;span class=&quot;kw&quot;&gt;require&lt;/span&gt;(laser)
pick_branching_model &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;function(tree){
  m1 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;pureBirth&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;branching.times&lt;/span&gt;(tree)))
  m2 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;bd&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;branching.times&lt;/span&gt;(tree)))
  &lt;span class=&quot;kw&quot;&gt;as.logical&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt;(m2$aic &amp;lt;&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;m1$aic))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Return only treebase trees that have branch lengths. This has to download every tree in treebase, so this will take a while. Good thing we don’t have to do that by hand.&lt;/p&gt;
&lt;pre class=&quot;sourceCode R&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;
all &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;search_treebase&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;Consensus&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;type.tree&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;branch_lengths=&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;TRUE&lt;/span&gt;)
tt &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;drop_errors&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;sapply&lt;/span&gt;(all, timetree))
is_yule &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;sapply&lt;/span&gt;(tt, pick_branching_model)
&lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt;(is_yule)&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Derryberry E, Claramunt S, Derryberry G, Chesser R, Cracraft J, Aleixo A, Pérez-Emán J, Remsen Jr. J and Brumfield R (2011). “Lineage Diversification And Morphological Evolution in A Large-Scale Continental Radiation: The Neotropical Ovenbirds And Woodcreepers (Aves: Furnariidae).” &lt;em&gt;Evolution&lt;/em&gt;, &lt;strong&gt;65&lt;/strong&gt;. &lt;a href=&quot;http://dx.doi.org/10.1111/j.1558-5646.2011.01374.x&quot;&gt;http://dx.doi.org/10.1111/j.1558-5646.2011.01374.x&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Showcasing the latest phylogenetic methods: AUTEUR</title>
	 <link href="/2012/07/20/showcasing-the-latest-phylogenetic-methods-auteur.html"/>
   <updated>2011-07-20T15:07:14+00:00</updated>
   <id>/07/20/showcasing-the-latest-phylogenetic-methods-auteur</id>
   <content type="html">&lt;p&gt;While high-speed fish feeding videos may be the signature of the lab, dig a bit deeper and you’ll find a wealth of comparative phylogenetic methods sneaking in.  It’s a natural union – expert functional morphology is the key to good comparative methods, just as phylogenies hold the key to untangling the evolutionary origins of that morphology.  The lab’s own former graduate, &lt;a href=&quot;http://www.brianomeara.info/&quot;&gt;Brian O’Meara&lt;/a&gt;, made a revolutionary step forward in the land of phylogenetic methods when he unveiled &lt;em&gt;Brownie&lt;/em&gt; in 2006, allowing researchers to identify major shifts in trait diversification rates across the tree.  This work spurred not only a flood of empirical applications but also methodological innovations, such as Liam’s &lt;a href=&quot;http://phytools.blogspot.com/2011/07/more-robust-version-of-brownielite.html&quot;&gt;brownie-lite&lt;/a&gt;, and today’s focus: &lt;a href=&quot;http://public.wsu.edu/~storfer/eastman/pages/index.html&quot;&gt;Jon Eastman&lt;/a&gt; &lt;em&gt;et al.&lt;/em&gt;’s auteur package.&lt;/p&gt;
&lt;p&gt;Auteur, short for “Accommodating uncertainty in trait evolution using R,” is the grown-up Bayesian RJMCMC version of that original idea in &lt;em&gt;Brownie&lt;/em&gt;.  Diversification rates can change along the phylogenetic tree – only this time, you don’t have to specify where those changes could have occurred, or how many there may have been – auteur simply tries them all.&lt;/p&gt;
&lt;p&gt;If you want the details, definitely go &lt;a href=&quot;http://doi.wiley.com/10.1111/j.1558-5646.2011.01401.x&quot;&gt;read the paper&lt;/a&gt; – it’s all there, clear and thorough.  Meanwhile, what we really want to do, is take it out for a test drive.&lt;/p&gt;
&lt;p&gt;The package isn’t up on CRAN yet, so you can grab the development version from Jon’s &lt;a href=&quot;https://github.com/eastman/auteur&quot;&gt;github&lt;/a&gt; page, or &lt;a href=&quot;https://github.com/downloads/eastman/auteur/auteur_0.11.0612.tar.gz&quot;&gt;click here&lt;/a&gt;.  Put that package in a working directory and fire up R in that directory.  Let’s go for a spin.&lt;/p&gt;
&lt;pre class=&quot;sourceCode R&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;install.packages&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;auteur_0.11.0612.tar.gz&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;repos=&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;NULL&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(auteur)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great, the package installed and loaded successfully. Looks like Jon’s put all 73 functions into the NAMESPACE, but it’s not hard to guess which one looks like the right one to start with.  rjmcmc.bm.  Yeah, that looks good.  It has a nice help file, with – praise the fish – example code.  Looks like we’re gonna run a simulation, where we know the answer, and see how it does:&lt;/p&gt;
&lt;pre class=&quot;sourceCode R&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;

     #############
     ## generate tree
     n=&lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt;
     while(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) {
             phy=&lt;span class=&quot;kw&quot;&gt;prunelastsplit&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;birthdeath.tree&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;b=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dt&quot;&gt;d=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;dt&quot;&gt;taxa.stop=&lt;/span&gt;n&lt;span class=&quot;dv&quot;&gt;+1&lt;/span&gt;))
             phy$tip.label=&lt;span class=&quot;kw&quot;&gt;paste&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;sp&amp;quot;&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:n,&lt;span class=&quot;dt&quot;&gt;sep=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;)
             rphy=&lt;span class=&quot;kw&quot;&gt;reorder&lt;/span&gt;(phy,&lt;span class=&quot;st&quot;&gt;&amp;quot;pruningwise&amp;quot;&lt;/span&gt;)

             &lt;span class=&quot;co&quot;&gt;# find an internal edge&lt;/span&gt;
             anc=&lt;span class=&quot;kw&quot;&gt;get.desc.of.node&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;Ntip&lt;/span&gt;(phy)+&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,phy)
             branches=phy$edge[,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;]
             branches=branches[branches&amp;gt;&lt;span class=&quot;kw&quot;&gt;Ntip&lt;/span&gt;(phy) &amp;amp;&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;branches!=anc]
             branch=branches[&lt;span class=&quot;kw&quot;&gt;sample&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;kw&quot;&gt;length&lt;/span&gt;(branches),&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)]
             desc=&lt;span class=&quot;kw&quot;&gt;get.descendants.of.node&lt;/span&gt;(branch,phy)
             if(&lt;span class=&quot;kw&quot;&gt;length&lt;/span&gt;(desc)&amp;gt;=&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;) break()
     }
     rphy=phy
     rphy$edge.length[&lt;span class=&quot;kw&quot;&gt;match&lt;/span&gt;(desc,phy$edge[,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;])]=phy$edge.length[&lt;span class=&quot;kw&quot;&gt;match&lt;/span&gt;(desc,phy$edge[,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;])]*&lt;span class=&quot;dv&quot;&gt;64&lt;/span&gt;

     e=&lt;span class=&quot;kw&quot;&gt;numeric&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;nrow&lt;/span&gt;(phy$edge))
     e[&lt;span class=&quot;kw&quot;&gt;match&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(branch,desc),phy$edge[,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;])]=&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
     cols=&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;red&amp;quot;&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&amp;quot;gray&amp;quot;&lt;/span&gt;)
     &lt;span class=&quot;kw&quot;&gt;dev.new&lt;/span&gt;()
     &lt;span class=&quot;kw&quot;&gt;plot&lt;/span&gt;(phy,&lt;span class=&quot;dt&quot;&gt;edge.col=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;ifelse&lt;/span&gt;(e==&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,cols[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;],cols[&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;]), &lt;span class=&quot;dt&quot;&gt;edge.width=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)
     &lt;span class=&quot;kw&quot;&gt;mtext&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;expected pattern of rates&amp;quot;&lt;/span&gt;)

     #############
     ## simulate data on the &amp;#39;rate-shifted&amp;#39; tree
     dat=&lt;span class=&quot;kw&quot;&gt;rTraitCont&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;phy=&lt;/span&gt;rphy, &lt;span class=&quot;dt&quot;&gt;model=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;BM&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;sigma=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;sqrt&lt;/span&gt;(&lt;span class=&quot;fl&quot;&gt;0.1&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That creates this beautiful example (sorry, no random generator seed, you’re results may vary but that’s ok) tree:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://farm7.static.flickr.com/6123/5952070152_e7761d597c.jpg&quot; /&gt; Okay, so that’s the target, showing where the shift occurred.  Note the last line got us some data on this tree.  We’re ready to run the software.  It looks super easy:&lt;/p&gt;
&lt;pre class=&quot;sourceCode R&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;
## run two short reversible-jump Markov chains
 r=&lt;span class=&quot;kw&quot;&gt;paste&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;sample&lt;/span&gt;(letters,&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;dt&quot;&gt;replace=&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;TRUE&lt;/span&gt;),&lt;span class=&quot;dt&quot;&gt;collapse=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;)
 &lt;span class=&quot;kw&quot;&gt;lapply&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, function(x) &lt;span class=&quot;kw&quot;&gt;rjmcmc.bm&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;phy=&lt;/span&gt;phy, &lt;span class=&quot;dt&quot;&gt;dat=&lt;/span&gt;dat, &lt;span class=&quot;dt&quot;&gt;ngen=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10000&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;sample.freq=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;prob.mergesplit=&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.1&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;simplestart=&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;TRUE&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;prop.width=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;fileBase=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;paste&lt;/span&gt;(r,x,&lt;span class=&quot;dt&quot;&gt;sep=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The data is going in as “phy” and “dat”, just as expected.  We won’t worry about the optional parameters that follow for the moment.  Note that because we use lapply to run multiple chains, it would be super easy to run this on multiple processors.&lt;/p&gt;
&lt;p&gt;Note that Jon’s creating a bunch of directories to store parameters, etc.  This can be important for MCMC methods where chains get too cumbersome to handle in memory.  Enough technical rambling, let’s merge and load those files in now, and plot what we got:&lt;/p&gt;
&lt;pre class=&quot;sourceCode R&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;
&lt;span class=&quot;co&quot;&gt;# collect directories&lt;/span&gt;
dirs=&lt;span class=&quot;kw&quot;&gt;dir&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;./&amp;quot;&lt;/span&gt;,&lt;span class=&quot;dt&quot;&gt;pattern=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;paste&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;BM&amp;quot;&lt;/span&gt;,r,&lt;span class=&quot;dt&quot;&gt;sep=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;))
&lt;span class=&quot;kw&quot;&gt;pool.rjmcmcsamples&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;base.dirs=&lt;/span&gt;dirs, &lt;span class=&quot;dt&quot;&gt;lab=&lt;/span&gt;r)

## view contents of .rda
&lt;span class=&quot;kw&quot;&gt;load&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;paste&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;paste&lt;/span&gt;(r,&lt;span class=&quot;st&quot;&gt;&amp;quot;combined.rjmcmc&amp;quot;&lt;/span&gt;,&lt;span class=&quot;dt&quot;&gt;sep=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;),&lt;span class=&quot;kw&quot;&gt;paste&lt;/span&gt;(r,&lt;span class=&quot;st&quot;&gt;&amp;quot;posteriorsamples.rda&amp;quot;&lt;/span&gt;,&lt;span class=&quot;dt&quot;&gt;sep=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;),&lt;span class=&quot;dt&quot;&gt;sep=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;))
&lt;span class=&quot;kw&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;head&lt;/span&gt;(posteriorsamples$rates))
&lt;span class=&quot;kw&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;head&lt;/span&gt;(posteriorsamples$rate.shifts))

## plot Markov sampled rates
&lt;span class=&quot;kw&quot;&gt;dev.new&lt;/span&gt;()
&lt;span class=&quot;kw&quot;&gt;shifts.plot&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;phy=&lt;/span&gt;phy, &lt;span class=&quot;dt&quot;&gt;base.dir=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;paste&lt;/span&gt;(r,&lt;span class=&quot;st&quot;&gt;&amp;quot;combined.rjmcmc&amp;quot;&lt;/span&gt;,&lt;span class=&quot;dt&quot;&gt;sep=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;burnin=&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;legend=&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;TRUE&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;edge.width=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)

&lt;span class=&quot;co&quot;&gt;# clean-up: unlink those directories&lt;/span&gt;
 &lt;span class=&quot;kw&quot;&gt;unlink&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;dir&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;pattern=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;paste&lt;/span&gt;(r)),&lt;span class=&quot;dt&quot;&gt;recursive=&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;TRUE&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
&lt;img src=&quot;http://farm7.static.flickr.com/6001/5952112488_91867e7f3a.jpg&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;Not only is that a beautiful plot, but it’s nailed the shift in species 12-16.  How’d your example do?&lt;/p&gt;
&lt;p&gt;Auteur comes with three beautiful large data sets described in the paper.  Check them out, but expect longer run times than our simple example!&lt;/p&gt;
&lt;pre class=&quot;sourceCode R&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;

&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt;(chelonia)
&lt;span class=&quot;co&quot;&gt;# take a look at this data&lt;/span&gt;
&amp;gt;&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;chelonia
$phy
Phylogenetic tree with &lt;span class=&quot;dv&quot;&gt;226&lt;/span&gt; tips and &lt;span class=&quot;dv&quot;&gt;225&lt;/span&gt; internal nodes.

Tip labels:
Elseya_latisternum, Chelodina_longicollis, Phrynops_gibbus, Acanthochelys_radiolata, Acanthochelys_macrocephala, Acanthochelys_pallidipectoris, ...

Rooted; includes branch lengths.

$dat
Pelomedusa_subrufa                   Pelusios_williamsi
&lt;span class=&quot;fl&quot;&gt;2.995732&lt;/span&gt;                             &lt;span class=&quot;fl&quot;&gt;3.218876&lt;/span&gt;
...
dat &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;chelonia$dat
phy &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;chelonia$phy
## ready to run as above
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://www.R-bloggers.com&quot;&gt;&lt;img src=&quot;http://a1.twimg.com/profile_images/1344218056/RblogLogo_bigger.png&quot; alt=&quot;R-bloggers.com&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks Jon and the rest of the Harmon Lab for a fantastic package. This is really just a tip of the iceberg, but should help get you started. See the paper for a good example of posterior analyses requisite after running any kind of MCMC, or stay tuned for a later post.&lt;/p&gt;
&lt;p&gt;(cross-posted from &lt;a href=&quot;http://fishlab.ucdavis.edu/?p=303&quot;&gt;my entry on the Wainwright lab blog&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.researchblogging.org&quot;&gt;&lt;img src=&quot;http://www.researchblogging.org/public/citation_icons/rb2_large_gray.png&quot; alt=&quot;ResearchBlogging.org&quot; /&gt;&lt;/a&gt; Eastman, J., Alfaro, M., Joyce, P., Hipp, A., &amp;amp; Harmon, L. (2011). A NOVEL COMPARATIVE METHOD FOR IDENTIFYING SHIFTS IN THE RATE OF CHARACTER EVOLUTION ON TREES Evolution DOI: &lt;a href=&quot;http://dx.doi.org/10.1111/j.1558-5646.2011.01401.x&quot;&gt;10.1111/j.1558-5646.2011.01401.x&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>TreeBASE in R: a first tutorial</title>
	 <link href="/2012/05/16/treebase-in-r-a-first-tutorial.html"/>
   <updated>2011-05-16T19:46:54+00:00</updated>
   <id>/05/16/treebase-in-r-a-first-tutorial</id>
   <content type="html">&lt;p&gt;My TreeBASE R package is essentially functional now.  Here’s a quick tutorial on the kinds of things it can do.  Grab the &lt;a href=&quot;https://github.com/cboettig/treeBASE/archives/master&quot;&gt;treebase package here&lt;/a&gt;, install and load the library into R.&lt;/p&gt;
&lt;p&gt;TreeBASE provides two APIs to query the database, one which searches by the metadata associated with different publications (called &lt;a href=&quot;http://sourceforge.net/apps/mediawiki/treebase/index.php?title=OAI-PMH&quot;&gt;OAI-PMH&lt;/a&gt;), and another which queries the phylogenies directly (called &lt;a href=&quot;http://sourceforge.net/apps/mediawiki/treebase/index.php?title=API&quot;&gt;Phylo-ws&lt;/a&gt;).  They have somewhat redundant functions, but for our purposes the second one returns the actual data, while the first returns metadata.  A few examples will best illustrate how this all works.  We start with some queries of the metadata directly without downloading any trees.&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;Trees can be downloaded with search_treebase(), using a variety of search conditions provided by Phylo-ws API.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Metadata can be searched by date using search_metadata.  Just Download all metadata for finer queries.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Metadata for a study can be grabbed using the study id.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A few examples will better illustrate how this all works.&lt;/p&gt;
&lt;h2 id=&quot;metadata-queries&quot;&gt;Metadata queries&lt;/h2&gt;
&lt;p&gt;How has TreeBASE grown since it’s inception?  Let’s grab the metadata for all entries and histogram by publication year:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;

all &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;search_metadata&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;by=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;all&amp;quot;&lt;/span&gt;)
dates &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;sapply&lt;/span&gt;(all, function(x) &lt;span class=&quot;kw&quot;&gt;as.numeric&lt;/span&gt;(x$date))
&lt;span class=&quot;kw&quot;&gt;hist&lt;/span&gt;(dates, &lt;span class=&quot;dt&quot;&gt;main=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;TreeBase growth&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;xlab=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;Year&amp;quot;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
&lt;img src=&quot;http://farm3.staticflickr.com/2676/5711820192_95ab0fc731_o.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;What journals have submitted the most studies to treebase?&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;

journals &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;sapply&lt;/span&gt;(all, function(x) x$publisher)
J &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;tail&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;as.factor&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;unlist&lt;/span&gt;(journals)))),&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)
b &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;barplot&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;as.numeric&lt;/span&gt;(J))
&lt;span class=&quot;kw&quot;&gt;text&lt;/span&gt;(b, &lt;span class=&quot;kw&quot;&gt;names&lt;/span&gt;(J), &lt;span class=&quot;dt&quot;&gt;srt=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;70&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;pos=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;xpd=&lt;/span&gt;T)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
&lt;img src=&quot;http://farm6.staticflickr.com/5125/5728023288_1737290073_o.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;How many have been submitted from &lt;em&gt;Nature&lt;/em&gt;? &lt;em&gt;Science&lt;/em&gt;?&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;

nature &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;sapply&lt;/span&gt;(all, function(x) &lt;span class=&quot;kw&quot;&gt;length&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;grep&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;Nature&amp;quot;&lt;/span&gt;, x$publisher))&amp;gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
science &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;sapply&lt;/span&gt;(all, function(x) &lt;span class=&quot;kw&quot;&gt;length&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;grep&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;^Science$&amp;quot;&lt;/span&gt;, x$publisher))&amp;gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)

&lt;span class=&quot;kw&quot;&gt;sum&lt;/span&gt;(nature)

&amp;gt;&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;sum&lt;/span&gt;(science)

&amp;gt;&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which studies were those?  Can I have those trees please?&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;

s &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;get_study_id&lt;/span&gt;( all[nature] )

nature_trees &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;sapply&lt;/span&gt;(s, function(x) &lt;span class=&quot;kw&quot;&gt;search_treebase&lt;/span&gt;(x, &lt;span class=&quot;st&quot;&gt;&amp;quot;id.study&amp;quot;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Other details associated with the study are certainly also available.  Since we downloaded all metadata we have this stored already.  Any tree downloaded stores the TreeBASE study id in &lt;span class=&quot;math&quot;&gt;\(S.id, ((and the unique tree id in \)&lt;/span&gt;Tr.id)) which we can use to look up the metadata again.&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;

&lt;span class=&quot;kw&quot;&gt;plot&lt;/span&gt;(nature_trees[[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]][[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]]) &lt;span class=&quot;co&quot;&gt;#plot first tree in the first study in the set&lt;/span&gt;

all[nature][&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;co&quot;&gt;# Pull metadata from complete list&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;# Or look up again using the study id:&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;metadata&lt;/span&gt;(nature_trees[[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]][[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]]$S.id)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;importing-phylogenies&quot;&gt;Importing Phylogenies&lt;/h2&gt;
&lt;p&gt;We can query for phylogenies directly on an array of search criteria, such as study authors, taxa included, number of taxa, number of characters in the trait matrix, etc, as illustrated by the following examples.  A few queries that aren’t built into the API (i.e. does the tree have branch lengths) are accomplished by filtering after downloading the tree, which is slower.&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;

## We&amp;#39;ll often use max_trees in the example so that they run quickly,
&lt;span class=&quot;co&quot;&gt;# notice the quotes for species.&lt;/span&gt;
dolphins &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;search_treebase&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;#39;&amp;quot;Delphinus&amp;quot;&amp;#39;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;by=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;taxon&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;max_trees=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)
## can do exact matches
humans &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;search_treebase&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;#39;&amp;quot;Homo sapiens&amp;quot;&amp;#39;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;by=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;taxon&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;exact_match=&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;TRUE&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;max_trees=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)
&lt;span class=&quot;co&quot;&gt;# all trees with 5 taxa&lt;/span&gt;
five &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;search_treebase&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;by=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;ntax&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;max_trees =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)
&lt;span class=&quot;co&quot;&gt;# These are different, a tree id isn&amp;#39;t a Study id.  we report both&lt;/span&gt;
studies &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;search_treebase&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2377&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;by=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;id.study&amp;quot;&lt;/span&gt;)
tree &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;search_treebase&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2377&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;by=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;id.tree&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;TreeID&amp;quot;&lt;/span&gt; =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;tree$Tr.id, &lt;span class=&quot;st&quot;&gt;&amp;quot;StudyID&amp;quot;&lt;/span&gt; =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;tree$S.id)
&lt;span class=&quot;co&quot;&gt;# Only results wiht branch lengths&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# Has to grab all the trees first, then toss out ones without branch_lengths&lt;/span&gt;
Near &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;search_treebase&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;Near&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;author&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;branch_lengths=&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;TRUE&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;length&lt;/span&gt;(Near)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These queries can be combined with metadata searches&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;

#### Metadata examples ###
&lt;span class=&quot;co&quot;&gt;# Use the OAI-PMH api to check out the metadata from the study in which tree is published:&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;metadata&lt;/span&gt;(Near[[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]]$S.id)
&lt;span class=&quot;co&quot;&gt;# or manualy give a sudy id&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;metadata&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2377&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;combining-metadata-and-phylogeny-queries&quot;&gt;Combining metadata and phylogeny queries&lt;/h2&gt;
&lt;p&gt;Metadata queries can optionally return only those studies added to TreeBASE before or after a given date:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;

&lt;span class=&quot;co&quot;&gt;# Use that to get all trees &amp;quot;published&amp;quot; after 2010&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# publication date is only a year&lt;/span&gt;
post2010 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;sapply&lt;/span&gt;(dates, function(x) &lt;span class=&quot;dv&quot;&gt;2010&lt;/span&gt; &amp;lt;&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;as.numeric&lt;/span&gt;(x))
s &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;get_study_id&lt;/span&gt;( all[post2010] )
out &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;lapply&lt;/span&gt;(s, function(x) &lt;span class=&quot;kw&quot;&gt;search_treebase&lt;/span&gt;(x, &lt;span class=&quot;st&quot;&gt;&amp;quot;id.study&amp;quot;&lt;/span&gt;))
&lt;span class=&quot;co&quot;&gt;# Grab the trees entered since 2011: (some studies will have multiple trees)&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#can compare dates with as.Date(&amp;quot;2001-01-01&amp;quot;, &amp;quot;%y-%m-%d) &amp;lt; as.Date ...&lt;/span&gt;
m &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;search_metadata&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2011-05-05&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;by=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;from&amp;quot;&lt;/span&gt;)
s &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;get_study_id&lt;/span&gt;(m)
out &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;lapply&lt;/span&gt;(s, function(x) &lt;span class=&quot;kw&quot;&gt;search_treebase&lt;/span&gt;(x, &lt;span class=&quot;st&quot;&gt;&amp;quot;id.study&amp;quot;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;a-simple-meta-analysis&quot;&gt;A simple meta-analysis&lt;/h2&gt;
&lt;p&gt;Of course, this capacity is most powerful not to merely get some summary statistics of the database, but repeat analyses of given studies or perform meta-analyses.  Most comparative phylogenetics methods require ultrametric trees.&lt;/p&gt;
&lt;p&gt;We can assemble a simple pipeline to perform the meta-analysis across all existing studies of whether phylogenies tend to fit a pure-birth or a birth-death model more frequently:&lt;/p&gt;
&lt;p&gt;As a proof-of-principle, we can create a pipeline that will estimate chronograms for all trees containing branchlengths in treebase.&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;

timetree &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;function(tree){
check.na &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;sum&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;is.na&lt;/span&gt;(tree$edge.length))&amp;gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
if(&lt;span class=&quot;kw&quot;&gt;is&lt;/span&gt;(check.na, &lt;span class=&quot;st&quot;&gt;&amp;quot;try-error&amp;quot;&lt;/span&gt;) |&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;check.na)
&lt;span class=&quot;ot&quot;&gt;NULL&lt;/span&gt;
else
&lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt;( &lt;span class=&quot;kw&quot;&gt;chronoMPL&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;multi2di&lt;/span&gt;(tree)) )
}
drop_errors &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;function(trees){
## apply to a list of trees created with timetree to drop errors
tt &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;tt[!&lt;span class=&quot;kw&quot;&gt;sapply&lt;/span&gt;(trees, is.null)]
tt &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;tt[!&lt;span class=&quot;kw&quot;&gt;sapply&lt;/span&gt;(tt, function(x) &lt;span class=&quot;kw&quot;&gt;is&lt;/span&gt;(x, &lt;span class=&quot;st&quot;&gt;&amp;quot;try-error&amp;quot;&lt;/span&gt;))]
&lt;span class=&quot;kw&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;paste&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;dropped&amp;quot;&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;length&lt;/span&gt;(trees)-&lt;span class=&quot;kw&quot;&gt;length&lt;/span&gt;(tt), &lt;span class=&quot;st&quot;&gt;&amp;quot;trees&amp;quot;&lt;/span&gt;))
tt

}

&lt;span class=&quot;kw&quot;&gt;require&lt;/span&gt;(laser)
pick_branching_model &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;function(tree){
 m1 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;pureBirth&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;branching.times&lt;/span&gt;(tree)))
 m2 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;bd&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;branching.times&lt;/span&gt;(tree)))
 &lt;span class=&quot;kw&quot;&gt;as.logical&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt;(m2$aic &amp;lt;&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;m1$aic))
}

&lt;span class=&quot;co&quot;&gt;# Return all treebase trees that have branch lengths&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# This has to download every tree in treebase, so not superfast...&lt;/span&gt;
all &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;search_treebase&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;Consensus&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;type.tree&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;branch_lengths=&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;TRUE&lt;/span&gt;)
tt &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;drop_errors&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;sapply&lt;/span&gt;(all, timetree))
is_yule &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;sapply&lt;/span&gt;(tt, pick_branching_model)
&lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt;(is_yule)&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;replicating-individual-studies&quot;&gt;Replicating individual studies&lt;/h2&gt;
&lt;p&gt;Replicating individual studies is a bit more challenging, mostly do to the quality of available data.  For instance, here is a nice recent study (Rowe &lt;em&gt;et. al.&lt;/em&gt; 2011) that has nicely time calibrated chronograms (from BEAST, Figure 4) and species trees (using BEST, Figure 3), but it seems only the&lt;a href=&quot;http://purl.org/phylo/treebase/dev/phylows/study/find?query=tb.identifier.study=10869&amp;amp;format=rss1&amp;amp;recordSchema=tree&quot;&gt;Mr. Bayes tree in Figure 2 is given in TreeBASE.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Further, replicating the study would require other data than the phylogenetic tree.  In the future we might hope that this data would appear on Dryad.  Dryad’s web-based search frustratingly does not seem to allow a simple query by doi or treebase id, and a query by title returns a long list of &lt;a href=&quot;http://datadryad.org/discover?&amp;amp;query=Recent+and+Rapid+Speciation+with+Limited+Morphological+Disparity+in+the+Genus+Rattus.&amp;amp;fq=dc.title%3ARecent+and+Rapid+Speciation+with+Limited+Morphological+Disparity+in+the+Genus+Rattus.&amp;amp;filtertype=*&amp;amp;filter=&amp;amp;rpp=10&amp;amp;sort_by=score&amp;amp;order=DESC&amp;amp;location=l2&quot;&gt;things that aren’t this paper&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Mendeley API (through my &lt;a href=&quot;https://github.com/cboettig/RMendeley&quot;&gt;RMendeley&lt;/a&gt; package) does a bit better at pulling out some metadata, but not much.  Querying by the doi we can’t find the paper, but the pmid works:&lt;/p&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;

&lt;span class=&quot;kw&quot;&gt;require&lt;/span&gt;(RMendeley)

&lt;span class=&quot;kw&quot;&gt;details&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;21239388&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;pmid&amp;quot;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://datadryad.org/handle/10255/dryad.1705&quot;&gt;Some Dryad papers&lt;/a&gt;have phylogenies, and the data deposition includes the BEAST xml files necessary to reproduce the phylogenies, but not, it seems, the phylogenies themselves.  It would be great to have some good examples of papers with data up on both TreeBASE and Dryad. Further, a pipeline that could regenerate the trees from the alignments might be interesting.&lt;/p&gt;
&lt;p&gt;RaXML for inferring branch lengths: A quick solution for trees that have only topologies would be to infer branch lengths conditional on the topology from the character matrix.  TreeBASE does not include this with the nexus file containing the tree, and would require a separate query to pull the character matrix.  This is handled in the read.nexus.data command.&lt;/p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Rowe K, Aplin K, Baverstock P and Moritz C (2011). “Recent And Rapid Speciation With Limited Morphological Disparity in The Genus Rattus.” &lt;em&gt;Systematic Biology&lt;/em&gt;, &lt;strong&gt;60&lt;/strong&gt;. ISSN 1063-5157, &lt;a href=&quot;http://dx.doi.org/10.1093/sysbio/syq092&quot;&gt;http://dx.doi.org/10.1093/sysbio/syq092&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>socialR: Reproducible Research & Notebook integration with R</title>
	 <link href="/2012/12/11/socialr-an-r-package-to-track-the-status-of-computations-with-social-network-tools.html"/>
   <updated>2010-12-11T03:44:54+00:00</updated>
   <id>/12/11/socialr-an-r-package-to-track-the-status-of-computations-with-social-network-tools</id>
   <content type="html">&lt;p&gt;I’ve created an R package that uses social media tools for reproducible research.  The goal of the package is this: whenever I run a code, output figures are automatically added to my figure repository (Flickr), linked to the timestamped version of the code that produced them in the code repository.  Figures should be tagged by project and be embedded selectively or automatically into this lab notebook.  The basic workflow of the notebook looks like this:[ref]Diagram of my notebook as presented at Science Online, 2011, see other slides in my &lt;a href=&quot;http://www.carlboettiger.info/archives/792&quot;&gt;entry on this&lt;/a&gt;.[/ref]&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;http://farm6.staticflickr.com/5259/5471680767_34c350314e_o.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;To do this, I use a few simple R functions that I wrap around  the system command-line programs git, flickr_upload, and hpc-autotweets to enable monitoring of my simulations through social media. The package has it’s own &lt;a href=&quot;https://github.com/cboettig/socialR&quot;&gt;git repository here&lt;/a&gt;.  This is a rather custom development to make for rapid deployment on my own machines, and depends largely on Linux tools external to R, so it may not be easily deployed by others.  See my earlier post, &lt;a href=&quot;http://www.carlboettiger.info/archives/375&quot;&gt;Making R Twitter&lt;/a&gt;, for examples and back story.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;http://farm5.staticflickr.com/4112/5196584707_663796eb6e_o.png&quot; /&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;basic-features&quot;&gt;Basic Features&lt;/h2&gt;
&lt;p&gt;All of these tasks are run by wrapping any plot command with my command “social_plot()”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Push the running code version to Github.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Grab the git hashtag to reference this version of the code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Push figures to Flickr as they complete.  Tags images appropriately and provide link to the code (version-stable, on Github) that produces them in the description.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tweet notification of a figure upload, parameter values, links to code, and timestamp.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tweet when an error occurs.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;setup-install&quot;&gt;Setup / Install&lt;/h2&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;Create a flickr account (need not be unique for the computer).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a twitter account (preferably separate one for the machine).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install &lt;a href=&quot;http://search.cpan.org/~cpb/Flickr-Upload/flickr_upload&quot;&gt;flickr_upload&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;; sudo apt-get install libflickr-upload-perl&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install &lt;a href=&quot;https://github.com/joshthecoder/tweepy/blob/master/INSTALL&quot;&gt;tweepy&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;easy_install tweepy&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(See link for more detailed instructions)&lt;/p&gt;
&lt;ol start=&quot;5&quot; type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://search.cpan.org/~cpb/Flickr-Upload/flickr_upload#___top&quot;&gt;Configure flickr_upload credentials&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://jeffmiller.github.com/2010/05/31/twitter-from-the-command-line-in-python-using-oauth&quot;&gt;Configure OAuth for tweepy&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;future-modifications&quot;&gt;Future modifications&lt;/h2&gt;
&lt;p&gt;Current program relies entirely on external command-line tools. Probably no easy solution to make this package self-contained and cross platform.  Still, a good bit of functionality can be added:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Add option to include the git log message.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Smart/more informative git commit messages&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add option/default to use truncated git commit ID numbers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make Flickr discription actually link directly to code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make twitter statements include urls/actual links (to code, files)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Identify machine credentials?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Documentation still needed&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Should verify if the git version is current&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Grab a DOI for the object (i.e. using EZID from UC3?)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
</feed>
